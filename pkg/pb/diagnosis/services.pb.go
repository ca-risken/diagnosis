// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0-devel
// 	protoc        v3.12.1
// source: services.proto

package diagnosis

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Diagnosis Service
type ListDiagnosisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListDiagnosisRequest) Reset() {
	*x = ListDiagnosisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiagnosisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiagnosisRequest) ProtoMessage() {}

func (x *ListDiagnosisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiagnosisRequest.ProtoReflect.Descriptor instead.
func (*ListDiagnosisRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{0}
}

func (x *ListDiagnosisRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListDiagnosisRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListDiagnosisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diagnosis []*Diagnosis `protobuf:"bytes,1,rep,name=diagnosis,proto3" json:"diagnosis,omitempty"`
}

func (x *ListDiagnosisResponse) Reset() {
	*x = ListDiagnosisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiagnosisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiagnosisResponse) ProtoMessage() {}

func (x *ListDiagnosisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiagnosisResponse.ProtoReflect.Descriptor instead.
func (*ListDiagnosisResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{1}
}

func (x *ListDiagnosisResponse) GetDiagnosis() []*Diagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

type GetDiagnosisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisId uint32 `protobuf:"varint,2,opt,name=diagnosis_id,json=diagnosisId,proto3" json:"diagnosis_id,omitempty"`
}

func (x *GetDiagnosisRequest) Reset() {
	*x = GetDiagnosisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosisRequest) ProtoMessage() {}

func (x *GetDiagnosisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosisRequest.ProtoReflect.Descriptor instead.
func (*GetDiagnosisRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{2}
}

func (x *GetDiagnosisRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetDiagnosisRequest) GetDiagnosisId() uint32 {
	if x != nil {
		return x.DiagnosisId
	}
	return 0
}

type GetDiagnosisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diagnosis *Diagnosis `protobuf:"bytes,1,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
}

func (x *GetDiagnosisResponse) Reset() {
	*x = GetDiagnosisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosisResponse) ProtoMessage() {}

func (x *GetDiagnosisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosisResponse.ProtoReflect.Descriptor instead.
func (*GetDiagnosisResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{3}
}

func (x *GetDiagnosisResponse) GetDiagnosis() *Diagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

type PutDiagnosisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint32              `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Diagnosis *DiagnosisForUpsert `protobuf:"bytes,2,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
}

func (x *PutDiagnosisRequest) Reset() {
	*x = PutDiagnosisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDiagnosisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDiagnosisRequest) ProtoMessage() {}

func (x *PutDiagnosisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDiagnosisRequest.ProtoReflect.Descriptor instead.
func (*PutDiagnosisRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{4}
}

func (x *PutDiagnosisRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutDiagnosisRequest) GetDiagnosis() *DiagnosisForUpsert {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

type PutDiagnosisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diagnosis *Diagnosis `protobuf:"bytes,1,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
}

func (x *PutDiagnosisResponse) Reset() {
	*x = PutDiagnosisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDiagnosisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDiagnosisResponse) ProtoMessage() {}

func (x *PutDiagnosisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDiagnosisResponse.ProtoReflect.Descriptor instead.
func (*PutDiagnosisResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{5}
}

func (x *PutDiagnosisResponse) GetDiagnosis() *Diagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

type DeleteDiagnosisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisId uint32 `protobuf:"varint,2,opt,name=diagnosis_id,json=diagnosisId,proto3" json:"diagnosis_id,omitempty"`
}

func (x *DeleteDiagnosisRequest) Reset() {
	*x = DeleteDiagnosisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiagnosisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiagnosisRequest) ProtoMessage() {}

func (x *DeleteDiagnosisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiagnosisRequest.ProtoReflect.Descriptor instead.
func (*DeleteDiagnosisRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDiagnosisRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteDiagnosisRequest) GetDiagnosisId() uint32 {
	if x != nil {
		return x.DiagnosisId
	}
	return 0
}

// DiagnosisDataSourceService
type ListDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListDiagnosisDataSourceRequest) Reset() {
	*x = ListDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *ListDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*ListDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{7}
}

func (x *ListDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListDiagnosisDataSourceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListDiagnosisDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosisDataSource []*DiagnosisDataSource `protobuf:"bytes,1,rep,name=diagnosis_data_source,json=diagnosisDataSource,proto3" json:"diagnosis_data_source,omitempty"`
}

func (x *ListDiagnosisDataSourceResponse) Reset() {
	*x = ListDiagnosisDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiagnosisDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiagnosisDataSourceResponse) ProtoMessage() {}

func (x *ListDiagnosisDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiagnosisDataSourceResponse.ProtoReflect.Descriptor instead.
func (*ListDiagnosisDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{8}
}

func (x *ListDiagnosisDataSourceResponse) GetDiagnosisDataSource() []*DiagnosisDataSource {
	if x != nil {
		return x.DiagnosisDataSource
	}
	return nil
}

type GetDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,2,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
}

func (x *GetDiagnosisDataSourceRequest) Reset() {
	*x = GetDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *GetDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*GetDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{9}
}

func (x *GetDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetDiagnosisDataSourceRequest) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

type GetDiagnosisDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosisDataSource *DiagnosisDataSource `protobuf:"bytes,1,opt,name=diagnosis_data_source,json=diagnosisDataSource,proto3" json:"diagnosis_data_source,omitempty"`
}

func (x *GetDiagnosisDataSourceResponse) Reset() {
	*x = GetDiagnosisDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosisDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosisDataSourceResponse) ProtoMessage() {}

func (x *GetDiagnosisDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosisDataSourceResponse.ProtoReflect.Descriptor instead.
func (*GetDiagnosisDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{10}
}

func (x *GetDiagnosisDataSourceResponse) GetDiagnosisDataSource() *DiagnosisDataSource {
	if x != nil {
		return x.DiagnosisDataSource
	}
	return nil
}

type PutDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId           uint32                        `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSource *DiagnosisDataSourceForUpsert `protobuf:"bytes,2,opt,name=diagnosis_data_source,json=diagnosisDataSource,proto3" json:"diagnosis_data_source,omitempty"`
}

func (x *PutDiagnosisDataSourceRequest) Reset() {
	*x = PutDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *PutDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*PutDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{11}
}

func (x *PutDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutDiagnosisDataSourceRequest) GetDiagnosisDataSource() *DiagnosisDataSourceForUpsert {
	if x != nil {
		return x.DiagnosisDataSource
	}
	return nil
}

type PutDiagnosisDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId           uint32               `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSource *DiagnosisDataSource `protobuf:"bytes,2,opt,name=diagnosis_data_source,json=diagnosisDataSource,proto3" json:"diagnosis_data_source,omitempty"`
}

func (x *PutDiagnosisDataSourceResponse) Reset() {
	*x = PutDiagnosisDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDiagnosisDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDiagnosisDataSourceResponse) ProtoMessage() {}

func (x *PutDiagnosisDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDiagnosisDataSourceResponse.ProtoReflect.Descriptor instead.
func (*PutDiagnosisDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{12}
}

func (x *PutDiagnosisDataSourceResponse) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutDiagnosisDataSourceResponse) GetDiagnosisDataSource() *DiagnosisDataSource {
	if x != nil {
		return x.DiagnosisDataSource
	}
	return nil
}

type DeleteDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,2,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
}

func (x *DeleteDiagnosisDataSourceRequest) Reset() {
	*x = DeleteDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *DeleteDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteDiagnosisDataSourceRequest) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

// KICK Diagnosis
type StartDiagnosisRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId                uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RelDiagnosisDataSourceId uint32 `protobuf:"varint,2,opt,name=rel_diagnosis_data_source_id,json=relDiagnosisDataSourceId,proto3" json:"rel_diagnosis_data_source_id,omitempty"`
}

func (x *StartDiagnosisRequest) Reset() {
	*x = StartDiagnosisRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDiagnosisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDiagnosisRequest) ProtoMessage() {}

func (x *StartDiagnosisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDiagnosisRequest.ProtoReflect.Descriptor instead.
func (*StartDiagnosisRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{14}
}

func (x *StartDiagnosisRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *StartDiagnosisRequest) GetRelDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.RelDiagnosisDataSourceId
	}
	return 0
}

type StartDiagnosisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartDiagnosisResponse) Reset() {
	*x = StartDiagnosisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartDiagnosisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartDiagnosisResponse) ProtoMessage() {}

func (x *StartDiagnosisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartDiagnosisResponse.ProtoReflect.Descriptor instead.
func (*StartDiagnosisResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{15}
}

func (x *StartDiagnosisResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// RelDiagnosisDataSourceService
type ListRelDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisId           uint32 `protobuf:"varint,2,opt,name=diagnosis_id,json=diagnosisId,proto3" json:"diagnosis_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,3,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
}

func (x *ListRelDiagnosisDataSourceRequest) Reset() {
	*x = ListRelDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRelDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRelDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *ListRelDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRelDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*ListRelDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{16}
}

func (x *ListRelDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListRelDiagnosisDataSourceRequest) GetDiagnosisId() uint32 {
	if x != nil {
		return x.DiagnosisId
	}
	return 0
}

func (x *ListRelDiagnosisDataSourceRequest) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

type ListRelDiagnosisDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelDiagnosisDataSource []*RelDiagnosisDataSource `protobuf:"bytes,1,rep,name=rel_diagnosis_data_source,json=relDiagnosisDataSource,proto3" json:"rel_diagnosis_data_source,omitempty"`
}

func (x *ListRelDiagnosisDataSourceResponse) Reset() {
	*x = ListRelDiagnosisDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRelDiagnosisDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRelDiagnosisDataSourceResponse) ProtoMessage() {}

func (x *ListRelDiagnosisDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRelDiagnosisDataSourceResponse.ProtoReflect.Descriptor instead.
func (*ListRelDiagnosisDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{17}
}

func (x *ListRelDiagnosisDataSourceResponse) GetRelDiagnosisDataSource() []*RelDiagnosisDataSource {
	if x != nil {
		return x.RelDiagnosisDataSource
	}
	return nil
}

type GetRelDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId                uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RelDiagnosisDataSourceId uint32 `protobuf:"varint,2,opt,name=rel_diagnosis_data_source_id,json=relDiagnosisDataSourceId,proto3" json:"rel_diagnosis_data_source_id,omitempty"`
}

func (x *GetRelDiagnosisDataSourceRequest) Reset() {
	*x = GetRelDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *GetRelDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*GetRelDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{18}
}

func (x *GetRelDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetRelDiagnosisDataSourceRequest) GetRelDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.RelDiagnosisDataSourceId
	}
	return 0
}

type GetRelDiagnosisDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelDiagnosisDataSource *RelDiagnosisDataSource `protobuf:"bytes,1,opt,name=rel_diagnosis_data_source,json=relDiagnosisDataSource,proto3" json:"rel_diagnosis_data_source,omitempty"`
}

func (x *GetRelDiagnosisDataSourceResponse) Reset() {
	*x = GetRelDiagnosisDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelDiagnosisDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelDiagnosisDataSourceResponse) ProtoMessage() {}

func (x *GetRelDiagnosisDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelDiagnosisDataSourceResponse.ProtoReflect.Descriptor instead.
func (*GetRelDiagnosisDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{19}
}

func (x *GetRelDiagnosisDataSourceResponse) GetRelDiagnosisDataSource() *RelDiagnosisDataSource {
	if x != nil {
		return x.RelDiagnosisDataSource
	}
	return nil
}

type PutRelDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId              uint32                           `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RelDiagnosisDataSource *RelDiagnosisDataSourceForUpsert `protobuf:"bytes,2,opt,name=rel_diagnosis_data_source,json=relDiagnosisDataSource,proto3" json:"rel_diagnosis_data_source,omitempty"`
}

func (x *PutRelDiagnosisDataSourceRequest) Reset() {
	*x = PutRelDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRelDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRelDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *PutRelDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRelDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*PutRelDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{20}
}

func (x *PutRelDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutRelDiagnosisDataSourceRequest) GetRelDiagnosisDataSource() *RelDiagnosisDataSourceForUpsert {
	if x != nil {
		return x.RelDiagnosisDataSource
	}
	return nil
}

type PutRelDiagnosisDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelDiagnosisDataSource *RelDiagnosisDataSource `protobuf:"bytes,1,opt,name=rel_diagnosis_data_source,json=relDiagnosisDataSource,proto3" json:"rel_diagnosis_data_source,omitempty"`
}

func (x *PutRelDiagnosisDataSourceResponse) Reset() {
	*x = PutRelDiagnosisDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRelDiagnosisDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRelDiagnosisDataSourceResponse) ProtoMessage() {}

func (x *PutRelDiagnosisDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRelDiagnosisDataSourceResponse.ProtoReflect.Descriptor instead.
func (*PutRelDiagnosisDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{21}
}

func (x *PutRelDiagnosisDataSourceResponse) GetRelDiagnosisDataSource() *RelDiagnosisDataSource {
	if x != nil {
		return x.RelDiagnosisDataSource
	}
	return nil
}

type DeleteRelDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId                uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	RelDiagnosisDataSourceId uint32 `protobuf:"varint,2,opt,name=rel_diagnosis_data_source_id,json=relDiagnosisDataSourceId,proto3" json:"rel_diagnosis_data_source_id,omitempty"`
}

func (x *DeleteRelDiagnosisDataSourceRequest) Reset() {
	*x = DeleteRelDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *DeleteRelDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteRelDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_services_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteRelDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteRelDiagnosisDataSourceRequest) GetRelDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.RelDiagnosisDataSourceId
	}
	return 0
}

var File_services_proto protoreflect.FileDescriptor

var file_services_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x1a, 0x0e, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x22, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x22, 0x71, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x09, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x22, 0x4a, 0x0a, 0x14, 0x50, 0x75, 0x74, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x22, 0x5a, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x64,
	0x22, 0x53, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x77, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1d,
	0x50, 0x75, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x15,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1e, 0x50, 0x75,
	0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x15, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x7a, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x76, 0x0a, 0x15, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x72, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x72, 0x65, 0x6c, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x19, 0x72, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x81, 0x01,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x72, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x72, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x81, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x19, 0x72, 0x65, 0x6c, 0x5f, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x16, 0x72,
	0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x20, 0x50, 0x75, 0x74, 0x52, 0x65, 0x6c,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x19, 0x72, 0x65, 0x6c,
	0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x21, 0x50, 0x75, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x19, 0x72, 0x65, 0x6c, 0x5f, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x16, 0x72, 0x65,
	0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x72,
	0x65, 0x6c, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x18, 0x72, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x32, 0xcc, 0x0a, 0x0a, 0x10,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x54, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x12, 0x1f, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0c, 0x50, 0x75, 0x74,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12,
	0x21, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x2e, 0x50, 0x75, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x62, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x2b, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7b, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x2b, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a,
	0x19, 0x50, 0x75, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x12, 0x20, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x79, 0x62, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x2f, 0x6d, 0x69, 0x6d, 0x6f, 0x73, 0x61, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_proto_rawDescOnce sync.Once
	file_services_proto_rawDescData = file_services_proto_rawDesc
)

func file_services_proto_rawDescGZIP() []byte {
	file_services_proto_rawDescOnce.Do(func() {
		file_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_proto_rawDescData)
	})
	return file_services_proto_rawDescData
}

var file_services_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_services_proto_goTypes = []interface{}{
	(*ListDiagnosisRequest)(nil),                // 0: diagnosis.ListDiagnosisRequest
	(*ListDiagnosisResponse)(nil),               // 1: diagnosis.ListDiagnosisResponse
	(*GetDiagnosisRequest)(nil),                 // 2: diagnosis.GetDiagnosisRequest
	(*GetDiagnosisResponse)(nil),                // 3: diagnosis.GetDiagnosisResponse
	(*PutDiagnosisRequest)(nil),                 // 4: diagnosis.PutDiagnosisRequest
	(*PutDiagnosisResponse)(nil),                // 5: diagnosis.PutDiagnosisResponse
	(*DeleteDiagnosisRequest)(nil),              // 6: diagnosis.DeleteDiagnosisRequest
	(*ListDiagnosisDataSourceRequest)(nil),      // 7: diagnosis.ListDiagnosisDataSourceRequest
	(*ListDiagnosisDataSourceResponse)(nil),     // 8: diagnosis.ListDiagnosisDataSourceResponse
	(*GetDiagnosisDataSourceRequest)(nil),       // 9: diagnosis.GetDiagnosisDataSourceRequest
	(*GetDiagnosisDataSourceResponse)(nil),      // 10: diagnosis.GetDiagnosisDataSourceResponse
	(*PutDiagnosisDataSourceRequest)(nil),       // 11: diagnosis.PutDiagnosisDataSourceRequest
	(*PutDiagnosisDataSourceResponse)(nil),      // 12: diagnosis.PutDiagnosisDataSourceResponse
	(*DeleteDiagnosisDataSourceRequest)(nil),    // 13: diagnosis.DeleteDiagnosisDataSourceRequest
	(*StartDiagnosisRequest)(nil),               // 14: diagnosis.StartDiagnosisRequest
	(*StartDiagnosisResponse)(nil),              // 15: diagnosis.StartDiagnosisResponse
	(*ListRelDiagnosisDataSourceRequest)(nil),   // 16: diagnosis.ListRelDiagnosisDataSourceRequest
	(*ListRelDiagnosisDataSourceResponse)(nil),  // 17: diagnosis.ListRelDiagnosisDataSourceResponse
	(*GetRelDiagnosisDataSourceRequest)(nil),    // 18: diagnosis.GetRelDiagnosisDataSourceRequest
	(*GetRelDiagnosisDataSourceResponse)(nil),   // 19: diagnosis.GetRelDiagnosisDataSourceResponse
	(*PutRelDiagnosisDataSourceRequest)(nil),    // 20: diagnosis.PutRelDiagnosisDataSourceRequest
	(*PutRelDiagnosisDataSourceResponse)(nil),   // 21: diagnosis.PutRelDiagnosisDataSourceResponse
	(*DeleteRelDiagnosisDataSourceRequest)(nil), // 22: diagnosis.DeleteRelDiagnosisDataSourceRequest
	(*Diagnosis)(nil),                           // 23: diagnosis.Diagnosis
	(*DiagnosisForUpsert)(nil),                  // 24: diagnosis.DiagnosisForUpsert
	(*DiagnosisDataSource)(nil),                 // 25: diagnosis.DiagnosisDataSource
	(*DiagnosisDataSourceForUpsert)(nil),        // 26: diagnosis.DiagnosisDataSourceForUpsert
	(*RelDiagnosisDataSource)(nil),              // 27: diagnosis.RelDiagnosisDataSource
	(*RelDiagnosisDataSourceForUpsert)(nil),     // 28: diagnosis.RelDiagnosisDataSourceForUpsert
	(*empty.Empty)(nil),                         // 29: google.protobuf.Empty
}
var file_services_proto_depIdxs = []int32{
	23, // 0: diagnosis.ListDiagnosisResponse.diagnosis:type_name -> diagnosis.Diagnosis
	23, // 1: diagnosis.GetDiagnosisResponse.diagnosis:type_name -> diagnosis.Diagnosis
	24, // 2: diagnosis.PutDiagnosisRequest.diagnosis:type_name -> diagnosis.DiagnosisForUpsert
	23, // 3: diagnosis.PutDiagnosisResponse.diagnosis:type_name -> diagnosis.Diagnosis
	25, // 4: diagnosis.ListDiagnosisDataSourceResponse.diagnosis_data_source:type_name -> diagnosis.DiagnosisDataSource
	25, // 5: diagnosis.GetDiagnosisDataSourceResponse.diagnosis_data_source:type_name -> diagnosis.DiagnosisDataSource
	26, // 6: diagnosis.PutDiagnosisDataSourceRequest.diagnosis_data_source:type_name -> diagnosis.DiagnosisDataSourceForUpsert
	25, // 7: diagnosis.PutDiagnosisDataSourceResponse.diagnosis_data_source:type_name -> diagnosis.DiagnosisDataSource
	27, // 8: diagnosis.ListRelDiagnosisDataSourceResponse.rel_diagnosis_data_source:type_name -> diagnosis.RelDiagnosisDataSource
	27, // 9: diagnosis.GetRelDiagnosisDataSourceResponse.rel_diagnosis_data_source:type_name -> diagnosis.RelDiagnosisDataSource
	28, // 10: diagnosis.PutRelDiagnosisDataSourceRequest.rel_diagnosis_data_source:type_name -> diagnosis.RelDiagnosisDataSourceForUpsert
	27, // 11: diagnosis.PutRelDiagnosisDataSourceResponse.rel_diagnosis_data_source:type_name -> diagnosis.RelDiagnosisDataSource
	0,  // 12: diagnosis.DiagnosisService.ListDiagnosis:input_type -> diagnosis.ListDiagnosisRequest
	2,  // 13: diagnosis.DiagnosisService.GetDiagnosis:input_type -> diagnosis.GetDiagnosisRequest
	4,  // 14: diagnosis.DiagnosisService.PutDiagnosis:input_type -> diagnosis.PutDiagnosisRequest
	6,  // 15: diagnosis.DiagnosisService.DeleteDiagnosis:input_type -> diagnosis.DeleteDiagnosisRequest
	7,  // 16: diagnosis.DiagnosisService.ListDiagnosisDataSource:input_type -> diagnosis.ListDiagnosisDataSourceRequest
	9,  // 17: diagnosis.DiagnosisService.GetDiagnosisDataSource:input_type -> diagnosis.GetDiagnosisDataSourceRequest
	11, // 18: diagnosis.DiagnosisService.PutDiagnosisDataSource:input_type -> diagnosis.PutDiagnosisDataSourceRequest
	13, // 19: diagnosis.DiagnosisService.DeleteDiagnosisDataSource:input_type -> diagnosis.DeleteDiagnosisDataSourceRequest
	16, // 20: diagnosis.DiagnosisService.ListRelDiagnosisDataSource:input_type -> diagnosis.ListRelDiagnosisDataSourceRequest
	18, // 21: diagnosis.DiagnosisService.GetRelDiagnosisDataSource:input_type -> diagnosis.GetRelDiagnosisDataSourceRequest
	20, // 22: diagnosis.DiagnosisService.PutRelDiagnosisDataSource:input_type -> diagnosis.PutRelDiagnosisDataSourceRequest
	22, // 23: diagnosis.DiagnosisService.DeleteRelDiagnosisDataSource:input_type -> diagnosis.DeleteRelDiagnosisDataSourceRequest
	14, // 24: diagnosis.DiagnosisService.StartDiagnosis:input_type -> diagnosis.StartDiagnosisRequest
	1,  // 25: diagnosis.DiagnosisService.ListDiagnosis:output_type -> diagnosis.ListDiagnosisResponse
	3,  // 26: diagnosis.DiagnosisService.GetDiagnosis:output_type -> diagnosis.GetDiagnosisResponse
	5,  // 27: diagnosis.DiagnosisService.PutDiagnosis:output_type -> diagnosis.PutDiagnosisResponse
	29, // 28: diagnosis.DiagnosisService.DeleteDiagnosis:output_type -> google.protobuf.Empty
	8,  // 29: diagnosis.DiagnosisService.ListDiagnosisDataSource:output_type -> diagnosis.ListDiagnosisDataSourceResponse
	10, // 30: diagnosis.DiagnosisService.GetDiagnosisDataSource:output_type -> diagnosis.GetDiagnosisDataSourceResponse
	12, // 31: diagnosis.DiagnosisService.PutDiagnosisDataSource:output_type -> diagnosis.PutDiagnosisDataSourceResponse
	29, // 32: diagnosis.DiagnosisService.DeleteDiagnosisDataSource:output_type -> google.protobuf.Empty
	17, // 33: diagnosis.DiagnosisService.ListRelDiagnosisDataSource:output_type -> diagnosis.ListRelDiagnosisDataSourceResponse
	19, // 34: diagnosis.DiagnosisService.GetRelDiagnosisDataSource:output_type -> diagnosis.GetRelDiagnosisDataSourceResponse
	21, // 35: diagnosis.DiagnosisService.PutRelDiagnosisDataSource:output_type -> diagnosis.PutRelDiagnosisDataSourceResponse
	29, // 36: diagnosis.DiagnosisService.DeleteRelDiagnosisDataSource:output_type -> google.protobuf.Empty
	15, // 37: diagnosis.DiagnosisService.StartDiagnosis:output_type -> diagnosis.StartDiagnosisResponse
	25, // [25:38] is the sub-list for method output_type
	12, // [12:25] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_services_proto_init() }
func file_services_proto_init() {
	if File_services_proto != nil {
		return
	}
	file_entities_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiagnosisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiagnosisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDiagnosisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDiagnosisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDiagnosisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiagnosisDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosisDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDiagnosisDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDiagnosisRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartDiagnosisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRelDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRelDiagnosisDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelDiagnosisDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRelDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRelDiagnosisDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_proto_goTypes,
		DependencyIndexes: file_services_proto_depIdxs,
		MessageInfos:      file_services_proto_msgTypes,
	}.Build()
	File_services_proto = out.File
	file_services_proto_rawDesc = nil
	file_services_proto_goTypes = nil
	file_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiagnosisServiceClient is the client API for DiagnosisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiagnosisServiceClient interface {
	// Diagnosis
	ListDiagnosis(ctx context.Context, in *ListDiagnosisRequest, opts ...grpc.CallOption) (*ListDiagnosisResponse, error)
	GetDiagnosis(ctx context.Context, in *GetDiagnosisRequest, opts ...grpc.CallOption) (*GetDiagnosisResponse, error)
	PutDiagnosis(ctx context.Context, in *PutDiagnosisRequest, opts ...grpc.CallOption) (*PutDiagnosisResponse, error)
	DeleteDiagnosis(ctx context.Context, in *DeleteDiagnosisRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DataSource
	ListDiagnosisDataSource(ctx context.Context, in *ListDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*ListDiagnosisDataSourceResponse, error)
	GetDiagnosisDataSource(ctx context.Context, in *GetDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*GetDiagnosisDataSourceResponse, error)
	PutDiagnosisDataSource(ctx context.Context, in *PutDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*PutDiagnosisDataSourceResponse, error)
	DeleteDiagnosisDataSource(ctx context.Context, in *DeleteDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// RelDiagnosisDataSource
	ListRelDiagnosisDataSource(ctx context.Context, in *ListRelDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*ListRelDiagnosisDataSourceResponse, error)
	GetRelDiagnosisDataSource(ctx context.Context, in *GetRelDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*GetRelDiagnosisDataSourceResponse, error)
	PutRelDiagnosisDataSource(ctx context.Context, in *PutRelDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*PutRelDiagnosisDataSourceResponse, error)
	DeleteRelDiagnosisDataSource(ctx context.Context, in *DeleteRelDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// KICK
	StartDiagnosis(ctx context.Context, in *StartDiagnosisRequest, opts ...grpc.CallOption) (*StartDiagnosisResponse, error)
}

type diagnosisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiagnosisServiceClient(cc grpc.ClientConnInterface) DiagnosisServiceClient {
	return &diagnosisServiceClient{cc}
}

func (c *diagnosisServiceClient) ListDiagnosis(ctx context.Context, in *ListDiagnosisRequest, opts ...grpc.CallOption) (*ListDiagnosisResponse, error) {
	out := new(ListDiagnosisResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/ListDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) GetDiagnosis(ctx context.Context, in *GetDiagnosisRequest, opts ...grpc.CallOption) (*GetDiagnosisResponse, error) {
	out := new(GetDiagnosisResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/GetDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) PutDiagnosis(ctx context.Context, in *PutDiagnosisRequest, opts ...grpc.CallOption) (*PutDiagnosisResponse, error) {
	out := new(PutDiagnosisResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/PutDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) DeleteDiagnosis(ctx context.Context, in *DeleteDiagnosisRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/DeleteDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) ListDiagnosisDataSource(ctx context.Context, in *ListDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*ListDiagnosisDataSourceResponse, error) {
	out := new(ListDiagnosisDataSourceResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/ListDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) GetDiagnosisDataSource(ctx context.Context, in *GetDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*GetDiagnosisDataSourceResponse, error) {
	out := new(GetDiagnosisDataSourceResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/GetDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) PutDiagnosisDataSource(ctx context.Context, in *PutDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*PutDiagnosisDataSourceResponse, error) {
	out := new(PutDiagnosisDataSourceResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/PutDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) DeleteDiagnosisDataSource(ctx context.Context, in *DeleteDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/DeleteDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) ListRelDiagnosisDataSource(ctx context.Context, in *ListRelDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*ListRelDiagnosisDataSourceResponse, error) {
	out := new(ListRelDiagnosisDataSourceResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/ListRelDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) GetRelDiagnosisDataSource(ctx context.Context, in *GetRelDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*GetRelDiagnosisDataSourceResponse, error) {
	out := new(GetRelDiagnosisDataSourceResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/GetRelDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) PutRelDiagnosisDataSource(ctx context.Context, in *PutRelDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*PutRelDiagnosisDataSourceResponse, error) {
	out := new(PutRelDiagnosisDataSourceResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/PutRelDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) DeleteRelDiagnosisDataSource(ctx context.Context, in *DeleteRelDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/DeleteRelDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) StartDiagnosis(ctx context.Context, in *StartDiagnosisRequest, opts ...grpc.CallOption) (*StartDiagnosisResponse, error) {
	out := new(StartDiagnosisResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/StartDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnosisServiceServer is the server API for DiagnosisService service.
type DiagnosisServiceServer interface {
	// Diagnosis
	ListDiagnosis(context.Context, *ListDiagnosisRequest) (*ListDiagnosisResponse, error)
	GetDiagnosis(context.Context, *GetDiagnosisRequest) (*GetDiagnosisResponse, error)
	PutDiagnosis(context.Context, *PutDiagnosisRequest) (*PutDiagnosisResponse, error)
	DeleteDiagnosis(context.Context, *DeleteDiagnosisRequest) (*empty.Empty, error)
	// DataSource
	ListDiagnosisDataSource(context.Context, *ListDiagnosisDataSourceRequest) (*ListDiagnosisDataSourceResponse, error)
	GetDiagnosisDataSource(context.Context, *GetDiagnosisDataSourceRequest) (*GetDiagnosisDataSourceResponse, error)
	PutDiagnosisDataSource(context.Context, *PutDiagnosisDataSourceRequest) (*PutDiagnosisDataSourceResponse, error)
	DeleteDiagnosisDataSource(context.Context, *DeleteDiagnosisDataSourceRequest) (*empty.Empty, error)
	// RelDiagnosisDataSource
	ListRelDiagnosisDataSource(context.Context, *ListRelDiagnosisDataSourceRequest) (*ListRelDiagnosisDataSourceResponse, error)
	GetRelDiagnosisDataSource(context.Context, *GetRelDiagnosisDataSourceRequest) (*GetRelDiagnosisDataSourceResponse, error)
	PutRelDiagnosisDataSource(context.Context, *PutRelDiagnosisDataSourceRequest) (*PutRelDiagnosisDataSourceResponse, error)
	DeleteRelDiagnosisDataSource(context.Context, *DeleteRelDiagnosisDataSourceRequest) (*empty.Empty, error)
	// KICK
	StartDiagnosis(context.Context, *StartDiagnosisRequest) (*StartDiagnosisResponse, error)
}

// UnimplementedDiagnosisServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDiagnosisServiceServer struct {
}

func (*UnimplementedDiagnosisServiceServer) ListDiagnosis(context.Context, *ListDiagnosisRequest) (*ListDiagnosisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiagnosis not implemented")
}
func (*UnimplementedDiagnosisServiceServer) GetDiagnosis(context.Context, *GetDiagnosisRequest) (*GetDiagnosisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnosis not implemented")
}
func (*UnimplementedDiagnosisServiceServer) PutDiagnosis(context.Context, *PutDiagnosisRequest) (*PutDiagnosisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDiagnosis not implemented")
}
func (*UnimplementedDiagnosisServiceServer) DeleteDiagnosis(context.Context, *DeleteDiagnosisRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiagnosis not implemented")
}
func (*UnimplementedDiagnosisServiceServer) ListDiagnosisDataSource(context.Context, *ListDiagnosisDataSourceRequest) (*ListDiagnosisDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) GetDiagnosisDataSource(context.Context, *GetDiagnosisDataSourceRequest) (*GetDiagnosisDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) PutDiagnosisDataSource(context.Context, *PutDiagnosisDataSourceRequest) (*PutDiagnosisDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) DeleteDiagnosisDataSource(context.Context, *DeleteDiagnosisDataSourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) ListRelDiagnosisDataSource(context.Context, *ListRelDiagnosisDataSourceRequest) (*ListRelDiagnosisDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRelDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) GetRelDiagnosisDataSource(context.Context, *GetRelDiagnosisDataSourceRequest) (*GetRelDiagnosisDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) PutRelDiagnosisDataSource(context.Context, *PutRelDiagnosisDataSourceRequest) (*PutRelDiagnosisDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutRelDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) DeleteRelDiagnosisDataSource(context.Context, *DeleteRelDiagnosisDataSourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) StartDiagnosis(context.Context, *StartDiagnosisRequest) (*StartDiagnosisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartDiagnosis not implemented")
}

func RegisterDiagnosisServiceServer(s *grpc.Server, srv DiagnosisServiceServer) {
	s.RegisterService(&_DiagnosisService_serviceDesc, srv)
}

func _DiagnosisService_ListDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiagnosisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).ListDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/ListDiagnosis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).ListDiagnosis(ctx, req.(*ListDiagnosisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_GetDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiagnosisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).GetDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/GetDiagnosis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).GetDiagnosis(ctx, req.(*GetDiagnosisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_PutDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDiagnosisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).PutDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/PutDiagnosis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).PutDiagnosis(ctx, req.(*PutDiagnosisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_DeleteDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiagnosisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).DeleteDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/DeleteDiagnosis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).DeleteDiagnosis(ctx, req.(*DeleteDiagnosisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_ListDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).ListDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/ListDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).ListDiagnosisDataSource(ctx, req.(*ListDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_GetDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).GetDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/GetDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).GetDiagnosisDataSource(ctx, req.(*GetDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_PutDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).PutDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/PutDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).PutDiagnosisDataSource(ctx, req.(*PutDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_DeleteDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).DeleteDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/DeleteDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).DeleteDiagnosisDataSource(ctx, req.(*DeleteDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_ListRelDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).ListRelDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/ListRelDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).ListRelDiagnosisDataSource(ctx, req.(*ListRelDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_GetRelDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).GetRelDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/GetRelDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).GetRelDiagnosisDataSource(ctx, req.(*GetRelDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_PutRelDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRelDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).PutRelDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/PutRelDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).PutRelDiagnosisDataSource(ctx, req.(*PutRelDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_DeleteRelDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).DeleteRelDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/DeleteRelDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).DeleteRelDiagnosisDataSource(ctx, req.(*DeleteRelDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_StartDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartDiagnosisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).StartDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/StartDiagnosis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).StartDiagnosis(ctx, req.(*StartDiagnosisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiagnosisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "diagnosis.DiagnosisService",
	HandlerType: (*DiagnosisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDiagnosis",
			Handler:    _DiagnosisService_ListDiagnosis_Handler,
		},
		{
			MethodName: "GetDiagnosis",
			Handler:    _DiagnosisService_GetDiagnosis_Handler,
		},
		{
			MethodName: "PutDiagnosis",
			Handler:    _DiagnosisService_PutDiagnosis_Handler,
		},
		{
			MethodName: "DeleteDiagnosis",
			Handler:    _DiagnosisService_DeleteDiagnosis_Handler,
		},
		{
			MethodName: "ListDiagnosisDataSource",
			Handler:    _DiagnosisService_ListDiagnosisDataSource_Handler,
		},
		{
			MethodName: "GetDiagnosisDataSource",
			Handler:    _DiagnosisService_GetDiagnosisDataSource_Handler,
		},
		{
			MethodName: "PutDiagnosisDataSource",
			Handler:    _DiagnosisService_PutDiagnosisDataSource_Handler,
		},
		{
			MethodName: "DeleteDiagnosisDataSource",
			Handler:    _DiagnosisService_DeleteDiagnosisDataSource_Handler,
		},
		{
			MethodName: "ListRelDiagnosisDataSource",
			Handler:    _DiagnosisService_ListRelDiagnosisDataSource_Handler,
		},
		{
			MethodName: "GetRelDiagnosisDataSource",
			Handler:    _DiagnosisService_GetRelDiagnosisDataSource_Handler,
		},
		{
			MethodName: "PutRelDiagnosisDataSource",
			Handler:    _DiagnosisService_PutRelDiagnosisDataSource_Handler,
		},
		{
			MethodName: "DeleteRelDiagnosisDataSource",
			Handler:    _DiagnosisService_DeleteRelDiagnosisDataSource_Handler,
		},
		{
			MethodName: "StartDiagnosis",
			Handler:    _DiagnosisService_StartDiagnosis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
