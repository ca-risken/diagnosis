// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: diagnosis/entities.proto

package diagnosis

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status
type Status int32

const (
	Status_UNKNOWN     Status = 0
	Status_OK          Status = 1
	Status_CONFIGURED  Status = 2
	Status_IN_PROGRESS Status = 3
	Status_ERROR       Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
		2: "CONFIGURED",
		3: "IN_PROGRESS",
		4: "ERROR",
	}
	Status_value = map[string]int32{
		"UNKNOWN":     0,
		"OK":          1,
		"CONFIGURED":  2,
		"IN_PROGRESS": 3,
		"ERROR":       4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_diagnosis_entities_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_diagnosis_entities_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{0}
}

type DiagnosisDataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosisDataSourceId uint32  `protobuf:"varint,1,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
	Name                  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description           string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MaxScore              float32 `protobuf:"fixed32,4,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
	CreatedAt             int64   `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             int64   `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *DiagnosisDataSource) Reset() {
	*x = DiagnosisDataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_entities_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosisDataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosisDataSource) ProtoMessage() {}

func (x *DiagnosisDataSource) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_entities_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosisDataSource.ProtoReflect.Descriptor instead.
func (*DiagnosisDataSource) Descriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{0}
}

func (x *DiagnosisDataSource) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

func (x *DiagnosisDataSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiagnosisDataSource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiagnosisDataSource) GetMaxScore() float32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *DiagnosisDataSource) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DiagnosisDataSource) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type DiagnosisDataSourceForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosisDataSourceId uint32  `protobuf:"varint,1,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
	Name                  string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description           string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	MaxScore              float32 `protobuf:"fixed32,4,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`
}

func (x *DiagnosisDataSourceForUpsert) Reset() {
	*x = DiagnosisDataSourceForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_entities_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosisDataSourceForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosisDataSourceForUpsert) ProtoMessage() {}

func (x *DiagnosisDataSourceForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_entities_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosisDataSourceForUpsert.ProtoReflect.Descriptor instead.
func (*DiagnosisDataSourceForUpsert) Descriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{1}
}

func (x *DiagnosisDataSourceForUpsert) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

func (x *DiagnosisDataSourceForUpsert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiagnosisDataSourceForUpsert) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DiagnosisDataSourceForUpsert) GetMaxScore() float32 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

type JiraSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JiraSettingId         uint32 `protobuf:"varint,1,opt,name=jira_setting_id,json=jiraSettingId,proto3" json:"jira_setting_id,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,3,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
	ProjectId             uint32 `protobuf:"varint,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	IdentityField         string `protobuf:"bytes,5,opt,name=identity_field,json=identityField,proto3" json:"identity_field,omitempty"`
	IdentityValue         string `protobuf:"bytes,6,opt,name=identity_value,json=identityValue,proto3" json:"identity_value,omitempty"`
	JiraId                string `protobuf:"bytes,7,opt,name=jira_id,json=jiraId,proto3" json:"jira_id,omitempty"`
	JiraKey               string `protobuf:"bytes,8,opt,name=jira_key,json=jiraKey,proto3" json:"jira_key,omitempty"`
	Status                Status `protobuf:"varint,9,opt,name=status,proto3,enum=diagnosis.Status" json:"status,omitempty"`
	StatusDetail          string `protobuf:"bytes,10,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt                int64  `protobuf:"varint,11,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
	CreatedAt             int64  `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             int64  `protobuf:"varint,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *JiraSetting) Reset() {
	*x = JiraSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_entities_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiraSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiraSetting) ProtoMessage() {}

func (x *JiraSetting) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_entities_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiraSetting.ProtoReflect.Descriptor instead.
func (*JiraSetting) Descriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{2}
}

func (x *JiraSetting) GetJiraSettingId() uint32 {
	if x != nil {
		return x.JiraSettingId
	}
	return 0
}

func (x *JiraSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JiraSetting) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

func (x *JiraSetting) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *JiraSetting) GetIdentityField() string {
	if x != nil {
		return x.IdentityField
	}
	return ""
}

func (x *JiraSetting) GetIdentityValue() string {
	if x != nil {
		return x.IdentityValue
	}
	return ""
}

func (x *JiraSetting) GetJiraId() string {
	if x != nil {
		return x.JiraId
	}
	return ""
}

func (x *JiraSetting) GetJiraKey() string {
	if x != nil {
		return x.JiraKey
	}
	return ""
}

func (x *JiraSetting) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *JiraSetting) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *JiraSetting) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

func (x *JiraSetting) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *JiraSetting) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type JiraSettingForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JiraSettingId         uint32 `protobuf:"varint,1,opt,name=jira_setting_id,json=jiraSettingId,proto3" json:"jira_setting_id,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,3,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
	ProjectId             uint32 `protobuf:"varint,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	IdentityField         string `protobuf:"bytes,5,opt,name=identity_field,json=identityField,proto3" json:"identity_field,omitempty"`
	IdentityValue         string `protobuf:"bytes,6,opt,name=identity_value,json=identityValue,proto3" json:"identity_value,omitempty"`
	JiraId                string `protobuf:"bytes,7,opt,name=jira_id,json=jiraId,proto3" json:"jira_id,omitempty"`
	JiraKey               string `protobuf:"bytes,8,opt,name=jira_key,json=jiraKey,proto3" json:"jira_key,omitempty"`
	Status                Status `protobuf:"varint,9,opt,name=status,proto3,enum=diagnosis.Status" json:"status,omitempty"`
	StatusDetail          string `protobuf:"bytes,10,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt                int64  `protobuf:"varint,11,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
}

func (x *JiraSettingForUpsert) Reset() {
	*x = JiraSettingForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_entities_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiraSettingForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiraSettingForUpsert) ProtoMessage() {}

func (x *JiraSettingForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_entities_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiraSettingForUpsert.ProtoReflect.Descriptor instead.
func (*JiraSettingForUpsert) Descriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{3}
}

func (x *JiraSettingForUpsert) GetJiraSettingId() uint32 {
	if x != nil {
		return x.JiraSettingId
	}
	return 0
}

func (x *JiraSettingForUpsert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JiraSettingForUpsert) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

func (x *JiraSettingForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *JiraSettingForUpsert) GetIdentityField() string {
	if x != nil {
		return x.IdentityField
	}
	return ""
}

func (x *JiraSettingForUpsert) GetIdentityValue() string {
	if x != nil {
		return x.IdentityValue
	}
	return ""
}

func (x *JiraSettingForUpsert) GetJiraId() string {
	if x != nil {
		return x.JiraId
	}
	return ""
}

func (x *JiraSettingForUpsert) GetJiraKey() string {
	if x != nil {
		return x.JiraKey
	}
	return ""
}

func (x *JiraSettingForUpsert) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *JiraSettingForUpsert) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *JiraSettingForUpsert) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

type WpscanSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WpscanSettingId       uint32 `protobuf:"varint,1,opt,name=wpscan_setting_id,json=wpscanSettingId,proto3" json:"wpscan_setting_id,omitempty"`
	ProjectId             uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,3,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
	TargetUrl             string `protobuf:"bytes,4,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
	Status                Status `protobuf:"varint,5,opt,name=status,proto3,enum=diagnosis.Status" json:"status,omitempty"`
	StatusDetail          string `protobuf:"bytes,6,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt                int64  `protobuf:"varint,7,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
	CreatedAt             int64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             int64  `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *WpscanSetting) Reset() {
	*x = WpscanSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_entities_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WpscanSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WpscanSetting) ProtoMessage() {}

func (x *WpscanSetting) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_entities_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WpscanSetting.ProtoReflect.Descriptor instead.
func (*WpscanSetting) Descriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{4}
}

func (x *WpscanSetting) GetWpscanSettingId() uint32 {
	if x != nil {
		return x.WpscanSettingId
	}
	return 0
}

func (x *WpscanSetting) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *WpscanSetting) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

func (x *WpscanSetting) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

func (x *WpscanSetting) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *WpscanSetting) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *WpscanSetting) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

func (x *WpscanSetting) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *WpscanSetting) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type WpscanSettingForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WpscanSettingId       uint32 `protobuf:"varint,1,opt,name=wpscan_setting_id,json=wpscanSettingId,proto3" json:"wpscan_setting_id,omitempty"`
	ProjectId             uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,3,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
	TargetUrl             string `protobuf:"bytes,4,opt,name=target_url,json=targetUrl,proto3" json:"target_url,omitempty"`
	Status                Status `protobuf:"varint,5,opt,name=status,proto3,enum=diagnosis.Status" json:"status,omitempty"`
	StatusDetail          string `protobuf:"bytes,6,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt                int64  `protobuf:"varint,7,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
}

func (x *WpscanSettingForUpsert) Reset() {
	*x = WpscanSettingForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_entities_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WpscanSettingForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WpscanSettingForUpsert) ProtoMessage() {}

func (x *WpscanSettingForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_entities_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WpscanSettingForUpsert.ProtoReflect.Descriptor instead.
func (*WpscanSettingForUpsert) Descriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{5}
}

func (x *WpscanSettingForUpsert) GetWpscanSettingId() uint32 {
	if x != nil {
		return x.WpscanSettingId
	}
	return 0
}

func (x *WpscanSettingForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *WpscanSettingForUpsert) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

func (x *WpscanSettingForUpsert) GetTargetUrl() string {
	if x != nil {
		return x.TargetUrl
	}
	return ""
}

func (x *WpscanSettingForUpsert) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *WpscanSettingForUpsert) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *WpscanSettingForUpsert) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

type PortscanSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortscanSettingId     uint32 `protobuf:"varint,1,opt,name=portscan_setting_id,json=portscanSettingId,proto3" json:"portscan_setting_id,omitempty"`
	ProjectId             uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,3,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
	Name                  string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt             int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PortscanSetting) Reset() {
	*x = PortscanSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_entities_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortscanSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortscanSetting) ProtoMessage() {}

func (x *PortscanSetting) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_entities_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortscanSetting.ProtoReflect.Descriptor instead.
func (*PortscanSetting) Descriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{6}
}

func (x *PortscanSetting) GetPortscanSettingId() uint32 {
	if x != nil {
		return x.PortscanSettingId
	}
	return 0
}

func (x *PortscanSetting) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PortscanSetting) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

func (x *PortscanSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PortscanSetting) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PortscanSetting) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PortscanSettingForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortscanSettingId     uint32 `protobuf:"varint,1,opt,name=portscan_setting_id,json=portscanSettingId,proto3" json:"portscan_setting_id,omitempty"`
	ProjectId             uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,3,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
	Name                  string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PortscanSettingForUpsert) Reset() {
	*x = PortscanSettingForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_entities_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortscanSettingForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortscanSettingForUpsert) ProtoMessage() {}

func (x *PortscanSettingForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_entities_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortscanSettingForUpsert.ProtoReflect.Descriptor instead.
func (*PortscanSettingForUpsert) Descriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{7}
}

func (x *PortscanSettingForUpsert) GetPortscanSettingId() uint32 {
	if x != nil {
		return x.PortscanSettingId
	}
	return 0
}

func (x *PortscanSettingForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PortscanSettingForUpsert) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

func (x *PortscanSettingForUpsert) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PortscanTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortscanTargetId  uint32 `protobuf:"varint,1,opt,name=portscan_target_id,json=portscanTargetId,proto3" json:"portscan_target_id,omitempty"`
	ProjectId         uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PortscanSettingId uint32 `protobuf:"varint,3,opt,name=portscan_setting_id,json=portscanSettingId,proto3" json:"portscan_setting_id,omitempty"`
	Target            string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Status            Status `protobuf:"varint,5,opt,name=status,proto3,enum=diagnosis.Status" json:"status,omitempty"`
	StatusDetail      string `protobuf:"bytes,6,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt            int64  `protobuf:"varint,7,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
	CreatedAt         int64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         int64  `protobuf:"varint,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *PortscanTarget) Reset() {
	*x = PortscanTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_entities_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortscanTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortscanTarget) ProtoMessage() {}

func (x *PortscanTarget) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_entities_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortscanTarget.ProtoReflect.Descriptor instead.
func (*PortscanTarget) Descriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{8}
}

func (x *PortscanTarget) GetPortscanTargetId() uint32 {
	if x != nil {
		return x.PortscanTargetId
	}
	return 0
}

func (x *PortscanTarget) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PortscanTarget) GetPortscanSettingId() uint32 {
	if x != nil {
		return x.PortscanSettingId
	}
	return 0
}

func (x *PortscanTarget) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PortscanTarget) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *PortscanTarget) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *PortscanTarget) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

func (x *PortscanTarget) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PortscanTarget) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PortscanTargetForUpsert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortscanTargetId  uint32 `protobuf:"varint,1,opt,name=portscan_target_id,json=portscanTargetId,proto3" json:"portscan_target_id,omitempty"`
	ProjectId         uint32 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PortscanSettingId uint32 `protobuf:"varint,3,opt,name=portscan_setting_id,json=portscanSettingId,proto3" json:"portscan_setting_id,omitempty"`
	Target            string `protobuf:"bytes,4,opt,name=target,proto3" json:"target,omitempty"`
	Status            Status `protobuf:"varint,5,opt,name=status,proto3,enum=diagnosis.Status" json:"status,omitempty"`
	StatusDetail      string `protobuf:"bytes,6,opt,name=status_detail,json=statusDetail,proto3" json:"status_detail,omitempty"`
	ScanAt            int64  `protobuf:"varint,7,opt,name=scan_at,json=scanAt,proto3" json:"scan_at,omitempty"`
}

func (x *PortscanTargetForUpsert) Reset() {
	*x = PortscanTargetForUpsert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_entities_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortscanTargetForUpsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortscanTargetForUpsert) ProtoMessage() {}

func (x *PortscanTargetForUpsert) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_entities_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortscanTargetForUpsert.ProtoReflect.Descriptor instead.
func (*PortscanTargetForUpsert) Descriptor() ([]byte, []int) {
	return file_diagnosis_entities_proto_rawDescGZIP(), []int{9}
}

func (x *PortscanTargetForUpsert) GetPortscanTargetId() uint32 {
	if x != nil {
		return x.PortscanTargetId
	}
	return 0
}

func (x *PortscanTargetForUpsert) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PortscanTargetForUpsert) GetPortscanSettingId() uint32 {
	if x != nil {
		return x.PortscanSettingId
	}
	return 0
}

func (x *PortscanTargetForUpsert) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PortscanTargetForUpsert) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *PortscanTargetForUpsert) GetStatusDetail() string {
	if x != nil {
		return x.StatusDetail
	}
	return ""
}

func (x *PortscanTargetForUpsert) GetScanAt() int64 {
	if x != nil {
		return x.ScanAt
	}
	return 0
}

var File_diagnosis_entities_proto protoreflect.FileDescriptor

var file_diagnosis_entities_proto_rawDesc = []byte{
	0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xaa, 0x01, 0x0a, 0x1c, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x22, 0xca, 0x03, 0x0a, 0x0b, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6a,
	0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x69, 0x72, 0x61, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x69, 0x72, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x61,
	0x6e, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x95, 0x03, 0x0a, 0x14, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6a, 0x69,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x6a, 0x69, 0x72, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a,
	0x69, 0x72, 0x61, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x69, 0x72, 0x61, 0x4b, 0x65, 0x79,
	0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x22, 0xd9, 0x02, 0x0a, 0x0d, 0x57, 0x70,
	0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x11, 0x77,
	0x70, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x29,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa4, 0x02, 0x0a, 0x16, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x70, 0x73,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x22, 0xeb, 0x01, 0x0a,
	0x0f, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x18, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0xcc, 0x02, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63,
	0x61, 0x6e, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x17, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63,
	0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x74, 0x2a, 0x49, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x79, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x2f, 0x6d, 0x69, 0x6d, 0x6f, 0x73, 0x61, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diagnosis_entities_proto_rawDescOnce sync.Once
	file_diagnosis_entities_proto_rawDescData = file_diagnosis_entities_proto_rawDesc
)

func file_diagnosis_entities_proto_rawDescGZIP() []byte {
	file_diagnosis_entities_proto_rawDescOnce.Do(func() {
		file_diagnosis_entities_proto_rawDescData = protoimpl.X.CompressGZIP(file_diagnosis_entities_proto_rawDescData)
	})
	return file_diagnosis_entities_proto_rawDescData
}

var file_diagnosis_entities_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_diagnosis_entities_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_diagnosis_entities_proto_goTypes = []interface{}{
	(Status)(0),                          // 0: diagnosis.Status
	(*DiagnosisDataSource)(nil),          // 1: diagnosis.DiagnosisDataSource
	(*DiagnosisDataSourceForUpsert)(nil), // 2: diagnosis.DiagnosisDataSourceForUpsert
	(*JiraSetting)(nil),                  // 3: diagnosis.JiraSetting
	(*JiraSettingForUpsert)(nil),         // 4: diagnosis.JiraSettingForUpsert
	(*WpscanSetting)(nil),                // 5: diagnosis.WpscanSetting
	(*WpscanSettingForUpsert)(nil),       // 6: diagnosis.WpscanSettingForUpsert
	(*PortscanSetting)(nil),              // 7: diagnosis.PortscanSetting
	(*PortscanSettingForUpsert)(nil),     // 8: diagnosis.PortscanSettingForUpsert
	(*PortscanTarget)(nil),               // 9: diagnosis.PortscanTarget
	(*PortscanTargetForUpsert)(nil),      // 10: diagnosis.PortscanTargetForUpsert
}
var file_diagnosis_entities_proto_depIdxs = []int32{
	0, // 0: diagnosis.JiraSetting.status:type_name -> diagnosis.Status
	0, // 1: diagnosis.JiraSettingForUpsert.status:type_name -> diagnosis.Status
	0, // 2: diagnosis.WpscanSetting.status:type_name -> diagnosis.Status
	0, // 3: diagnosis.WpscanSettingForUpsert.status:type_name -> diagnosis.Status
	0, // 4: diagnosis.PortscanTarget.status:type_name -> diagnosis.Status
	0, // 5: diagnosis.PortscanTargetForUpsert.status:type_name -> diagnosis.Status
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_diagnosis_entities_proto_init() }
func file_diagnosis_entities_proto_init() {
	if File_diagnosis_entities_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_diagnosis_entities_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosisDataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_entities_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosisDataSourceForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_entities_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiraSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_entities_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiraSettingForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_entities_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WpscanSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_entities_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WpscanSettingForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_entities_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortscanSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_entities_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortscanSettingForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_entities_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortscanTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_entities_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortscanTargetForUpsert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diagnosis_entities_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_diagnosis_entities_proto_goTypes,
		DependencyIndexes: file_diagnosis_entities_proto_depIdxs,
		EnumInfos:         file_diagnosis_entities_proto_enumTypes,
		MessageInfos:      file_diagnosis_entities_proto_msgTypes,
	}.Build()
	File_diagnosis_entities_proto = out.File
	file_diagnosis_entities_proto_rawDesc = nil
	file_diagnosis_entities_proto_goTypes = nil
	file_diagnosis_entities_proto_depIdxs = nil
}
