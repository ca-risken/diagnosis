// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: diagnosis/services.proto

package diagnosis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DiagnosisDataSourceService
type ListDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListDiagnosisDataSourceRequest) Reset() {
	*x = ListDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *ListDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*ListDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{0}
}

func (x *ListDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListDiagnosisDataSourceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListDiagnosisDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosisDataSource []*DiagnosisDataSource `protobuf:"bytes,1,rep,name=diagnosis_data_source,json=diagnosisDataSource,proto3" json:"diagnosis_data_source,omitempty"`
}

func (x *ListDiagnosisDataSourceResponse) Reset() {
	*x = ListDiagnosisDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiagnosisDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiagnosisDataSourceResponse) ProtoMessage() {}

func (x *ListDiagnosisDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiagnosisDataSourceResponse.ProtoReflect.Descriptor instead.
func (*ListDiagnosisDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{1}
}

func (x *ListDiagnosisDataSourceResponse) GetDiagnosisDataSource() []*DiagnosisDataSource {
	if x != nil {
		return x.DiagnosisDataSource
	}
	return nil
}

type GetDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,2,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
}

func (x *GetDiagnosisDataSourceRequest) Reset() {
	*x = GetDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *GetDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*GetDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{2}
}

func (x *GetDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetDiagnosisDataSourceRequest) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

type GetDiagnosisDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiagnosisDataSource *DiagnosisDataSource `protobuf:"bytes,1,opt,name=diagnosis_data_source,json=diagnosisDataSource,proto3" json:"diagnosis_data_source,omitempty"`
}

func (x *GetDiagnosisDataSourceResponse) Reset() {
	*x = GetDiagnosisDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiagnosisDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiagnosisDataSourceResponse) ProtoMessage() {}

func (x *GetDiagnosisDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiagnosisDataSourceResponse.ProtoReflect.Descriptor instead.
func (*GetDiagnosisDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{3}
}

func (x *GetDiagnosisDataSourceResponse) GetDiagnosisDataSource() *DiagnosisDataSource {
	if x != nil {
		return x.DiagnosisDataSource
	}
	return nil
}

type PutDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId           uint32                        `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSource *DiagnosisDataSourceForUpsert `protobuf:"bytes,2,opt,name=diagnosis_data_source,json=diagnosisDataSource,proto3" json:"diagnosis_data_source,omitempty"`
}

func (x *PutDiagnosisDataSourceRequest) Reset() {
	*x = PutDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *PutDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*PutDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{4}
}

func (x *PutDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutDiagnosisDataSourceRequest) GetDiagnosisDataSource() *DiagnosisDataSourceForUpsert {
	if x != nil {
		return x.DiagnosisDataSource
	}
	return nil
}

type PutDiagnosisDataSourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId           uint32               `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSource *DiagnosisDataSource `protobuf:"bytes,2,opt,name=diagnosis_data_source,json=diagnosisDataSource,proto3" json:"diagnosis_data_source,omitempty"`
}

func (x *PutDiagnosisDataSourceResponse) Reset() {
	*x = PutDiagnosisDataSourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutDiagnosisDataSourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutDiagnosisDataSourceResponse) ProtoMessage() {}

func (x *PutDiagnosisDataSourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutDiagnosisDataSourceResponse.ProtoReflect.Descriptor instead.
func (*PutDiagnosisDataSourceResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{5}
}

func (x *PutDiagnosisDataSourceResponse) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutDiagnosisDataSourceResponse) GetDiagnosisDataSource() *DiagnosisDataSource {
	if x != nil {
		return x.DiagnosisDataSource
	}
	return nil
}

type DeleteDiagnosisDataSourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,2,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
}

func (x *DeleteDiagnosisDataSourceRequest) Reset() {
	*x = DeleteDiagnosisDataSourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiagnosisDataSourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiagnosisDataSourceRequest) ProtoMessage() {}

func (x *DeleteDiagnosisDataSourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiagnosisDataSourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDiagnosisDataSourceRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDiagnosisDataSourceRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteDiagnosisDataSourceRequest) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

// JiraSettingService
type ListJiraSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,2,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
}

func (x *ListJiraSettingRequest) Reset() {
	*x = ListJiraSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJiraSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJiraSettingRequest) ProtoMessage() {}

func (x *ListJiraSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJiraSettingRequest.ProtoReflect.Descriptor instead.
func (*ListJiraSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{7}
}

func (x *ListJiraSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListJiraSettingRequest) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

type ListJiraSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JiraSetting []*JiraSetting `protobuf:"bytes,1,rep,name=jira_setting,json=jiraSetting,proto3" json:"jira_setting,omitempty"`
}

func (x *ListJiraSettingResponse) Reset() {
	*x = ListJiraSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJiraSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJiraSettingResponse) ProtoMessage() {}

func (x *ListJiraSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJiraSettingResponse.ProtoReflect.Descriptor instead.
func (*ListJiraSettingResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{8}
}

func (x *ListJiraSettingResponse) GetJiraSetting() []*JiraSetting {
	if x != nil {
		return x.JiraSetting
	}
	return nil
}

type GetJiraSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	JiraSettingId uint32 `protobuf:"varint,2,opt,name=jira_setting_id,json=jiraSettingId,proto3" json:"jira_setting_id,omitempty"`
}

func (x *GetJiraSettingRequest) Reset() {
	*x = GetJiraSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJiraSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJiraSettingRequest) ProtoMessage() {}

func (x *GetJiraSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJiraSettingRequest.ProtoReflect.Descriptor instead.
func (*GetJiraSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{9}
}

func (x *GetJiraSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetJiraSettingRequest) GetJiraSettingId() uint32 {
	if x != nil {
		return x.JiraSettingId
	}
	return 0
}

type GetJiraSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JiraSetting *JiraSetting `protobuf:"bytes,1,opt,name=jira_setting,json=jiraSetting,proto3" json:"jira_setting,omitempty"`
}

func (x *GetJiraSettingResponse) Reset() {
	*x = GetJiraSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJiraSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJiraSettingResponse) ProtoMessage() {}

func (x *GetJiraSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJiraSettingResponse.ProtoReflect.Descriptor instead.
func (*GetJiraSettingResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{10}
}

func (x *GetJiraSettingResponse) GetJiraSetting() *JiraSetting {
	if x != nil {
		return x.JiraSetting
	}
	return nil
}

type PutJiraSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   uint32                `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	JiraSetting *JiraSettingForUpsert `protobuf:"bytes,2,opt,name=jira_setting,json=jiraSetting,proto3" json:"jira_setting,omitempty"`
}

func (x *PutJiraSettingRequest) Reset() {
	*x = PutJiraSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutJiraSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutJiraSettingRequest) ProtoMessage() {}

func (x *PutJiraSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutJiraSettingRequest.ProtoReflect.Descriptor instead.
func (*PutJiraSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{11}
}

func (x *PutJiraSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutJiraSettingRequest) GetJiraSetting() *JiraSettingForUpsert {
	if x != nil {
		return x.JiraSetting
	}
	return nil
}

type PutJiraSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JiraSetting *JiraSetting `protobuf:"bytes,1,opt,name=jira_setting,json=jiraSetting,proto3" json:"jira_setting,omitempty"`
}

func (x *PutJiraSettingResponse) Reset() {
	*x = PutJiraSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutJiraSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutJiraSettingResponse) ProtoMessage() {}

func (x *PutJiraSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutJiraSettingResponse.ProtoReflect.Descriptor instead.
func (*PutJiraSettingResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{12}
}

func (x *PutJiraSettingResponse) GetJiraSetting() *JiraSetting {
	if x != nil {
		return x.JiraSetting
	}
	return nil
}

type DeleteJiraSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	JiraSettingId uint32 `protobuf:"varint,2,opt,name=jira_setting_id,json=jiraSettingId,proto3" json:"jira_setting_id,omitempty"`
}

func (x *DeleteJiraSettingRequest) Reset() {
	*x = DeleteJiraSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJiraSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJiraSettingRequest) ProtoMessage() {}

func (x *DeleteJiraSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJiraSettingRequest.ProtoReflect.Descriptor instead.
func (*DeleteJiraSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteJiraSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteJiraSettingRequest) GetJiraSettingId() uint32 {
	if x != nil {
		return x.JiraSettingId
	}
	return 0
}

// WpscanSettingService
type ListWpscanSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,2,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
}

func (x *ListWpscanSettingRequest) Reset() {
	*x = ListWpscanSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWpscanSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWpscanSettingRequest) ProtoMessage() {}

func (x *ListWpscanSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWpscanSettingRequest.ProtoReflect.Descriptor instead.
func (*ListWpscanSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{14}
}

func (x *ListWpscanSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListWpscanSettingRequest) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

type ListWpscanSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WpscanSetting []*WpscanSetting `protobuf:"bytes,1,rep,name=wpscan_setting,json=wpscanSetting,proto3" json:"wpscan_setting,omitempty"`
}

func (x *ListWpscanSettingResponse) Reset() {
	*x = ListWpscanSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWpscanSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWpscanSettingResponse) ProtoMessage() {}

func (x *ListWpscanSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWpscanSettingResponse.ProtoReflect.Descriptor instead.
func (*ListWpscanSettingResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{15}
}

func (x *ListWpscanSettingResponse) GetWpscanSetting() []*WpscanSetting {
	if x != nil {
		return x.WpscanSetting
	}
	return nil
}

type GetWpscanSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	WpscanSettingId uint32 `protobuf:"varint,2,opt,name=wpscan_setting_id,json=wpscanSettingId,proto3" json:"wpscan_setting_id,omitempty"`
}

func (x *GetWpscanSettingRequest) Reset() {
	*x = GetWpscanSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWpscanSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWpscanSettingRequest) ProtoMessage() {}

func (x *GetWpscanSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWpscanSettingRequest.ProtoReflect.Descriptor instead.
func (*GetWpscanSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{16}
}

func (x *GetWpscanSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetWpscanSettingRequest) GetWpscanSettingId() uint32 {
	if x != nil {
		return x.WpscanSettingId
	}
	return 0
}

type GetWpscanSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WpscanSetting *WpscanSetting `protobuf:"bytes,1,opt,name=wpscan_setting,json=wpscanSetting,proto3" json:"wpscan_setting,omitempty"`
}

func (x *GetWpscanSettingResponse) Reset() {
	*x = GetWpscanSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWpscanSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWpscanSettingResponse) ProtoMessage() {}

func (x *GetWpscanSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWpscanSettingResponse.ProtoReflect.Descriptor instead.
func (*GetWpscanSettingResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{17}
}

func (x *GetWpscanSettingResponse) GetWpscanSetting() *WpscanSetting {
	if x != nil {
		return x.WpscanSetting
	}
	return nil
}

type PutWpscanSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId     uint32                  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	WpscanSetting *WpscanSettingForUpsert `protobuf:"bytes,2,opt,name=wpscan_setting,json=wpscanSetting,proto3" json:"wpscan_setting,omitempty"`
}

func (x *PutWpscanSettingRequest) Reset() {
	*x = PutWpscanSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutWpscanSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutWpscanSettingRequest) ProtoMessage() {}

func (x *PutWpscanSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutWpscanSettingRequest.ProtoReflect.Descriptor instead.
func (*PutWpscanSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{18}
}

func (x *PutWpscanSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutWpscanSettingRequest) GetWpscanSetting() *WpscanSettingForUpsert {
	if x != nil {
		return x.WpscanSetting
	}
	return nil
}

type PutWpscanSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WpscanSetting *WpscanSetting `protobuf:"bytes,1,opt,name=wpscan_setting,json=wpscanSetting,proto3" json:"wpscan_setting,omitempty"`
}

func (x *PutWpscanSettingResponse) Reset() {
	*x = PutWpscanSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutWpscanSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutWpscanSettingResponse) ProtoMessage() {}

func (x *PutWpscanSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutWpscanSettingResponse.ProtoReflect.Descriptor instead.
func (*PutWpscanSettingResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{19}
}

func (x *PutWpscanSettingResponse) GetWpscanSetting() *WpscanSetting {
	if x != nil {
		return x.WpscanSetting
	}
	return nil
}

type DeleteWpscanSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	WpscanSettingId uint32 `protobuf:"varint,2,opt,name=wpscan_setting_id,json=wpscanSettingId,proto3" json:"wpscan_setting_id,omitempty"`
}

func (x *DeleteWpscanSettingRequest) Reset() {
	*x = DeleteWpscanSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWpscanSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWpscanSettingRequest) ProtoMessage() {}

func (x *DeleteWpscanSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWpscanSettingRequest.ProtoReflect.Descriptor instead.
func (*DeleteWpscanSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteWpscanSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeleteWpscanSettingRequest) GetWpscanSettingId() uint32 {
	if x != nil {
		return x.WpscanSettingId
	}
	return 0
}

// PortscanSettingService
type ListPortscanSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,2,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
}

func (x *ListPortscanSettingRequest) Reset() {
	*x = ListPortscanSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPortscanSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortscanSettingRequest) ProtoMessage() {}

func (x *ListPortscanSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortscanSettingRequest.ProtoReflect.Descriptor instead.
func (*ListPortscanSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{21}
}

func (x *ListPortscanSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListPortscanSettingRequest) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

type ListPortscanSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortscanSetting []*PortscanSetting `protobuf:"bytes,1,rep,name=portscan_setting,json=portscanSetting,proto3" json:"portscan_setting,omitempty"`
}

func (x *ListPortscanSettingResponse) Reset() {
	*x = ListPortscanSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPortscanSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortscanSettingResponse) ProtoMessage() {}

func (x *ListPortscanSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortscanSettingResponse.ProtoReflect.Descriptor instead.
func (*ListPortscanSettingResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{22}
}

func (x *ListPortscanSettingResponse) GetPortscanSetting() []*PortscanSetting {
	if x != nil {
		return x.PortscanSetting
	}
	return nil
}

type GetPortscanSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId         uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PortscanSettingId uint32 `protobuf:"varint,2,opt,name=portscan_setting_id,json=portscanSettingId,proto3" json:"portscan_setting_id,omitempty"`
}

func (x *GetPortscanSettingRequest) Reset() {
	*x = GetPortscanSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortscanSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortscanSettingRequest) ProtoMessage() {}

func (x *GetPortscanSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortscanSettingRequest.ProtoReflect.Descriptor instead.
func (*GetPortscanSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{23}
}

func (x *GetPortscanSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetPortscanSettingRequest) GetPortscanSettingId() uint32 {
	if x != nil {
		return x.PortscanSettingId
	}
	return 0
}

type GetPortscanSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortscanSetting *PortscanSetting `protobuf:"bytes,1,opt,name=portscan_setting,json=portscanSetting,proto3" json:"portscan_setting,omitempty"`
}

func (x *GetPortscanSettingResponse) Reset() {
	*x = GetPortscanSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortscanSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortscanSettingResponse) ProtoMessage() {}

func (x *GetPortscanSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortscanSettingResponse.ProtoReflect.Descriptor instead.
func (*GetPortscanSettingResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{24}
}

func (x *GetPortscanSettingResponse) GetPortscanSetting() *PortscanSetting {
	if x != nil {
		return x.PortscanSetting
	}
	return nil
}

type PutPortscanSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       uint32                    `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PortscanSetting *PortscanSettingForUpsert `protobuf:"bytes,2,opt,name=portscan_setting,json=portscanSetting,proto3" json:"portscan_setting,omitempty"`
}

func (x *PutPortscanSettingRequest) Reset() {
	*x = PutPortscanSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutPortscanSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutPortscanSettingRequest) ProtoMessage() {}

func (x *PutPortscanSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutPortscanSettingRequest.ProtoReflect.Descriptor instead.
func (*PutPortscanSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{25}
}

func (x *PutPortscanSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutPortscanSettingRequest) GetPortscanSetting() *PortscanSettingForUpsert {
	if x != nil {
		return x.PortscanSetting
	}
	return nil
}

type PutPortscanSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortscanSetting *PortscanSetting `protobuf:"bytes,1,opt,name=portscan_setting,json=portscanSetting,proto3" json:"portscan_setting,omitempty"`
}

func (x *PutPortscanSettingResponse) Reset() {
	*x = PutPortscanSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutPortscanSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutPortscanSettingResponse) ProtoMessage() {}

func (x *PutPortscanSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutPortscanSettingResponse.ProtoReflect.Descriptor instead.
func (*PutPortscanSettingResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{26}
}

func (x *PutPortscanSettingResponse) GetPortscanSetting() *PortscanSetting {
	if x != nil {
		return x.PortscanSetting
	}
	return nil
}

type DeletePortscanSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId         uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PortscanSettingId uint32 `protobuf:"varint,2,opt,name=portscan_setting_id,json=portscanSettingId,proto3" json:"portscan_setting_id,omitempty"`
}

func (x *DeletePortscanSettingRequest) Reset() {
	*x = DeletePortscanSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePortscanSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePortscanSettingRequest) ProtoMessage() {}

func (x *DeletePortscanSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePortscanSettingRequest.ProtoReflect.Descriptor instead.
func (*DeletePortscanSettingRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{27}
}

func (x *DeletePortscanSettingRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeletePortscanSettingRequest) GetPortscanSettingId() uint32 {
	if x != nil {
		return x.PortscanSettingId
	}
	return 0
}

type ListPortscanTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId         uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PortscanSettingId uint32 `protobuf:"varint,2,opt,name=portscan_setting_id,json=portscanSettingId,proto3" json:"portscan_setting_id,omitempty"`
}

func (x *ListPortscanTargetRequest) Reset() {
	*x = ListPortscanTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPortscanTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortscanTargetRequest) ProtoMessage() {}

func (x *ListPortscanTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortscanTargetRequest.ProtoReflect.Descriptor instead.
func (*ListPortscanTargetRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{28}
}

func (x *ListPortscanTargetRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ListPortscanTargetRequest) GetPortscanSettingId() uint32 {
	if x != nil {
		return x.PortscanSettingId
	}
	return 0
}

type ListPortscanTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortscanTarget []*PortscanTarget `protobuf:"bytes,1,rep,name=portscan_target,json=portscanTarget,proto3" json:"portscan_target,omitempty"`
}

func (x *ListPortscanTargetResponse) Reset() {
	*x = ListPortscanTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPortscanTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPortscanTargetResponse) ProtoMessage() {}

func (x *ListPortscanTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPortscanTargetResponse.ProtoReflect.Descriptor instead.
func (*ListPortscanTargetResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{29}
}

func (x *ListPortscanTargetResponse) GetPortscanTarget() []*PortscanTarget {
	if x != nil {
		return x.PortscanTarget
	}
	return nil
}

type GetPortscanTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PortscanTargetId uint32 `protobuf:"varint,2,opt,name=portscan_target_id,json=portscanTargetId,proto3" json:"portscan_target_id,omitempty"`
}

func (x *GetPortscanTargetRequest) Reset() {
	*x = GetPortscanTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortscanTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortscanTargetRequest) ProtoMessage() {}

func (x *GetPortscanTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortscanTargetRequest.ProtoReflect.Descriptor instead.
func (*GetPortscanTargetRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{30}
}

func (x *GetPortscanTargetRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetPortscanTargetRequest) GetPortscanTargetId() uint32 {
	if x != nil {
		return x.PortscanTargetId
	}
	return 0
}

type GetPortscanTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortscanTarget *PortscanTarget `protobuf:"bytes,1,opt,name=portscan_target,json=portscanTarget,proto3" json:"portscan_target,omitempty"`
}

func (x *GetPortscanTargetResponse) Reset() {
	*x = GetPortscanTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortscanTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortscanTargetResponse) ProtoMessage() {}

func (x *GetPortscanTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortscanTargetResponse.ProtoReflect.Descriptor instead.
func (*GetPortscanTargetResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{31}
}

func (x *GetPortscanTargetResponse) GetPortscanTarget() *PortscanTarget {
	if x != nil {
		return x.PortscanTarget
	}
	return nil
}

type PutPortscanTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId      uint32                   `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PortscanTarget *PortscanTargetForUpsert `protobuf:"bytes,2,opt,name=portscan_target,json=portscanTarget,proto3" json:"portscan_target,omitempty"`
}

func (x *PutPortscanTargetRequest) Reset() {
	*x = PutPortscanTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutPortscanTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutPortscanTargetRequest) ProtoMessage() {}

func (x *PutPortscanTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutPortscanTargetRequest.ProtoReflect.Descriptor instead.
func (*PutPortscanTargetRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{32}
}

func (x *PutPortscanTargetRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *PutPortscanTargetRequest) GetPortscanTarget() *PortscanTargetForUpsert {
	if x != nil {
		return x.PortscanTarget
	}
	return nil
}

type PutPortscanTargetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortscanTarget *PortscanTarget `protobuf:"bytes,1,opt,name=portscan_target,json=portscanTarget,proto3" json:"portscan_target,omitempty"`
}

func (x *PutPortscanTargetResponse) Reset() {
	*x = PutPortscanTargetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutPortscanTargetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutPortscanTargetResponse) ProtoMessage() {}

func (x *PutPortscanTargetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutPortscanTargetResponse.ProtoReflect.Descriptor instead.
func (*PutPortscanTargetResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{33}
}

func (x *PutPortscanTargetResponse) GetPortscanTarget() *PortscanTarget {
	if x != nil {
		return x.PortscanTarget
	}
	return nil
}

type DeletePortscanTargetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId        uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PortscanTargetId uint32 `protobuf:"varint,2,opt,name=portscan_target_id,json=portscanTargetId,proto3" json:"portscan_target_id,omitempty"`
}

func (x *DeletePortscanTargetRequest) Reset() {
	*x = DeletePortscanTargetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePortscanTargetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePortscanTargetRequest) ProtoMessage() {}

func (x *DeletePortscanTargetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePortscanTargetRequest.ProtoReflect.Descriptor instead.
func (*DeletePortscanTargetRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{34}
}

func (x *DeletePortscanTargetRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *DeletePortscanTargetRequest) GetPortscanTargetId() uint32 {
	if x != nil {
		return x.PortscanTargetId
	}
	return 0
}

// KICK Diagnosis
type InvokeScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId             uint32 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SettingId             uint32 `protobuf:"varint,2,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`
	DiagnosisDataSourceId uint32 `protobuf:"varint,3,opt,name=diagnosis_data_source_id,json=diagnosisDataSourceId,proto3" json:"diagnosis_data_source_id,omitempty"`
	ScanOnly              bool   `protobuf:"varint,4,opt,name=scan_only,json=scanOnly,proto3" json:"scan_only,omitempty"`
}

func (x *InvokeScanRequest) Reset() {
	*x = InvokeScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeScanRequest) ProtoMessage() {}

func (x *InvokeScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeScanRequest.ProtoReflect.Descriptor instead.
func (*InvokeScanRequest) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{35}
}

func (x *InvokeScanRequest) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *InvokeScanRequest) GetSettingId() uint32 {
	if x != nil {
		return x.SettingId
	}
	return 0
}

func (x *InvokeScanRequest) GetDiagnosisDataSourceId() uint32 {
	if x != nil {
		return x.DiagnosisDataSourceId
	}
	return 0
}

func (x *InvokeScanRequest) GetScanOnly() bool {
	if x != nil {
		return x.ScanOnly
	}
	return false
}

type InvokeScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *InvokeScanResponse) Reset() {
	*x = InvokeScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_diagnosis_services_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeScanResponse) ProtoMessage() {}

func (x *InvokeScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_diagnosis_services_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeScanResponse.ProtoReflect.Descriptor instead.
func (*InvokeScanResponse) Descriptor() ([]byte, []int) {
	return file_diagnosis_services_proto_rawDescGZIP(), []int{36}
}

func (x *InvokeScanResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_diagnosis_services_proto protoreflect.FileDescriptor

var file_diagnosis_services_proto_rawDesc = []byte{
	0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x1a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x75, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e,
	0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x77, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x74, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1d, 0x50, 0x75, 0x74, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x15, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1e, 0x50, 0x75, 0x74, 0x44, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x13, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x7a, 0x0a, 0x20, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x4a,
	0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x17, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x6a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6a, 0x69, 0x72, 0x61, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22,
	0x53, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6a, 0x69, 0x72,
	0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4a, 0x69, 0x72, 0x61,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x7a, 0x0a, 0x15, 0x50, 0x75, 0x74, 0x4a, 0x69, 0x72, 0x61, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c,
	0x6a, 0x69, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4a,
	0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x0b, 0x6a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0x53, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6a, 0x69,
	0x72, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4a, 0x69, 0x72,
	0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6a, 0x69, 0x72, 0x61, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x61, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a,
	0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x6a, 0x69, 0x72, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6a, 0x69, 0x72, 0x61, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x77, 0x70, 0x73,
	0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x57, 0x70,
	0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x77, 0x70, 0x73,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x64, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x22, 0x5b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e,
	0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2e, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d,
	0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x82, 0x01,
	0x0a, 0x17, 0x50, 0x75, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0e, 0x77, 0x70, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x57, 0x70, 0x73,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x52, 0x0d, 0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x5b, 0x0a, 0x18, 0x50, 0x75, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0e, 0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0d, 0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0x67, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x77, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x64,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x10, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x6a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x22, 0x63, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x50, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x22, 0x63, 0x0a, 0x1a, 0x50, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x6d, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x22, 0x60, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63,
	0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0e,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x86,
	0x01, 0x0a, 0x18, 0x50, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x6f,
	0x72, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x5f, 0x0a, 0x19, 0x50, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63,
	0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63,
	0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x6a, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x2e,
	0x0a, 0x12, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0xc7,
	0x10, 0x0a, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x72, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x28, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x16, 0x50, 0x75, 0x74, 0x44,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50,
	0x75, 0x74, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x69, 0x72, 0x61, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x69, 0x72,
	0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2e, 0x50, 0x75, 0x74, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4a, 0x69, 0x72, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x60, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x10, 0x50, 0x75, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2e, 0x50, 0x75, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x70, 0x73, 0x63, 0x61, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x25,
	0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x50, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63,
	0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x75, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x27, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x23, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11,
	0x50, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x2e, 0x50, 0x75,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61, 0x6e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x63, 0x61,
	0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x6f,
	0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x1c, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53,
	0x63, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x79, 0x62, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x2f, 0x6d, 0x69, 0x6d, 0x6f, 0x73, 0x61, 0x2d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_diagnosis_services_proto_rawDescOnce sync.Once
	file_diagnosis_services_proto_rawDescData = file_diagnosis_services_proto_rawDesc
)

func file_diagnosis_services_proto_rawDescGZIP() []byte {
	file_diagnosis_services_proto_rawDescOnce.Do(func() {
		file_diagnosis_services_proto_rawDescData = protoimpl.X.CompressGZIP(file_diagnosis_services_proto_rawDescData)
	})
	return file_diagnosis_services_proto_rawDescData
}

var file_diagnosis_services_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_diagnosis_services_proto_goTypes = []interface{}{
	(*ListDiagnosisDataSourceRequest)(nil),   // 0: diagnosis.ListDiagnosisDataSourceRequest
	(*ListDiagnosisDataSourceResponse)(nil),  // 1: diagnosis.ListDiagnosisDataSourceResponse
	(*GetDiagnosisDataSourceRequest)(nil),    // 2: diagnosis.GetDiagnosisDataSourceRequest
	(*GetDiagnosisDataSourceResponse)(nil),   // 3: diagnosis.GetDiagnosisDataSourceResponse
	(*PutDiagnosisDataSourceRequest)(nil),    // 4: diagnosis.PutDiagnosisDataSourceRequest
	(*PutDiagnosisDataSourceResponse)(nil),   // 5: diagnosis.PutDiagnosisDataSourceResponse
	(*DeleteDiagnosisDataSourceRequest)(nil), // 6: diagnosis.DeleteDiagnosisDataSourceRequest
	(*ListJiraSettingRequest)(nil),           // 7: diagnosis.ListJiraSettingRequest
	(*ListJiraSettingResponse)(nil),          // 8: diagnosis.ListJiraSettingResponse
	(*GetJiraSettingRequest)(nil),            // 9: diagnosis.GetJiraSettingRequest
	(*GetJiraSettingResponse)(nil),           // 10: diagnosis.GetJiraSettingResponse
	(*PutJiraSettingRequest)(nil),            // 11: diagnosis.PutJiraSettingRequest
	(*PutJiraSettingResponse)(nil),           // 12: diagnosis.PutJiraSettingResponse
	(*DeleteJiraSettingRequest)(nil),         // 13: diagnosis.DeleteJiraSettingRequest
	(*ListWpscanSettingRequest)(nil),         // 14: diagnosis.ListWpscanSettingRequest
	(*ListWpscanSettingResponse)(nil),        // 15: diagnosis.ListWpscanSettingResponse
	(*GetWpscanSettingRequest)(nil),          // 16: diagnosis.GetWpscanSettingRequest
	(*GetWpscanSettingResponse)(nil),         // 17: diagnosis.GetWpscanSettingResponse
	(*PutWpscanSettingRequest)(nil),          // 18: diagnosis.PutWpscanSettingRequest
	(*PutWpscanSettingResponse)(nil),         // 19: diagnosis.PutWpscanSettingResponse
	(*DeleteWpscanSettingRequest)(nil),       // 20: diagnosis.DeleteWpscanSettingRequest
	(*ListPortscanSettingRequest)(nil),       // 21: diagnosis.ListPortscanSettingRequest
	(*ListPortscanSettingResponse)(nil),      // 22: diagnosis.ListPortscanSettingResponse
	(*GetPortscanSettingRequest)(nil),        // 23: diagnosis.GetPortscanSettingRequest
	(*GetPortscanSettingResponse)(nil),       // 24: diagnosis.GetPortscanSettingResponse
	(*PutPortscanSettingRequest)(nil),        // 25: diagnosis.PutPortscanSettingRequest
	(*PutPortscanSettingResponse)(nil),       // 26: diagnosis.PutPortscanSettingResponse
	(*DeletePortscanSettingRequest)(nil),     // 27: diagnosis.DeletePortscanSettingRequest
	(*ListPortscanTargetRequest)(nil),        // 28: diagnosis.ListPortscanTargetRequest
	(*ListPortscanTargetResponse)(nil),       // 29: diagnosis.ListPortscanTargetResponse
	(*GetPortscanTargetRequest)(nil),         // 30: diagnosis.GetPortscanTargetRequest
	(*GetPortscanTargetResponse)(nil),        // 31: diagnosis.GetPortscanTargetResponse
	(*PutPortscanTargetRequest)(nil),         // 32: diagnosis.PutPortscanTargetRequest
	(*PutPortscanTargetResponse)(nil),        // 33: diagnosis.PutPortscanTargetResponse
	(*DeletePortscanTargetRequest)(nil),      // 34: diagnosis.DeletePortscanTargetRequest
	(*InvokeScanRequest)(nil),                // 35: diagnosis.InvokeScanRequest
	(*InvokeScanResponse)(nil),               // 36: diagnosis.InvokeScanResponse
	(*DiagnosisDataSource)(nil),              // 37: diagnosis.DiagnosisDataSource
	(*DiagnosisDataSourceForUpsert)(nil),     // 38: diagnosis.DiagnosisDataSourceForUpsert
	(*JiraSetting)(nil),                      // 39: diagnosis.JiraSetting
	(*JiraSettingForUpsert)(nil),             // 40: diagnosis.JiraSettingForUpsert
	(*WpscanSetting)(nil),                    // 41: diagnosis.WpscanSetting
	(*WpscanSettingForUpsert)(nil),           // 42: diagnosis.WpscanSettingForUpsert
	(*PortscanSetting)(nil),                  // 43: diagnosis.PortscanSetting
	(*PortscanSettingForUpsert)(nil),         // 44: diagnosis.PortscanSettingForUpsert
	(*PortscanTarget)(nil),                   // 45: diagnosis.PortscanTarget
	(*PortscanTargetForUpsert)(nil),          // 46: diagnosis.PortscanTargetForUpsert
	(*emptypb.Empty)(nil),                    // 47: google.protobuf.Empty
}
var file_diagnosis_services_proto_depIdxs = []int32{
	37, // 0: diagnosis.ListDiagnosisDataSourceResponse.diagnosis_data_source:type_name -> diagnosis.DiagnosisDataSource
	37, // 1: diagnosis.GetDiagnosisDataSourceResponse.diagnosis_data_source:type_name -> diagnosis.DiagnosisDataSource
	38, // 2: diagnosis.PutDiagnosisDataSourceRequest.diagnosis_data_source:type_name -> diagnosis.DiagnosisDataSourceForUpsert
	37, // 3: diagnosis.PutDiagnosisDataSourceResponse.diagnosis_data_source:type_name -> diagnosis.DiagnosisDataSource
	39, // 4: diagnosis.ListJiraSettingResponse.jira_setting:type_name -> diagnosis.JiraSetting
	39, // 5: diagnosis.GetJiraSettingResponse.jira_setting:type_name -> diagnosis.JiraSetting
	40, // 6: diagnosis.PutJiraSettingRequest.jira_setting:type_name -> diagnosis.JiraSettingForUpsert
	39, // 7: diagnosis.PutJiraSettingResponse.jira_setting:type_name -> diagnosis.JiraSetting
	41, // 8: diagnosis.ListWpscanSettingResponse.wpscan_setting:type_name -> diagnosis.WpscanSetting
	41, // 9: diagnosis.GetWpscanSettingResponse.wpscan_setting:type_name -> diagnosis.WpscanSetting
	42, // 10: diagnosis.PutWpscanSettingRequest.wpscan_setting:type_name -> diagnosis.WpscanSettingForUpsert
	41, // 11: diagnosis.PutWpscanSettingResponse.wpscan_setting:type_name -> diagnosis.WpscanSetting
	43, // 12: diagnosis.ListPortscanSettingResponse.portscan_setting:type_name -> diagnosis.PortscanSetting
	43, // 13: diagnosis.GetPortscanSettingResponse.portscan_setting:type_name -> diagnosis.PortscanSetting
	44, // 14: diagnosis.PutPortscanSettingRequest.portscan_setting:type_name -> diagnosis.PortscanSettingForUpsert
	43, // 15: diagnosis.PutPortscanSettingResponse.portscan_setting:type_name -> diagnosis.PortscanSetting
	45, // 16: diagnosis.ListPortscanTargetResponse.portscan_target:type_name -> diagnosis.PortscanTarget
	45, // 17: diagnosis.GetPortscanTargetResponse.portscan_target:type_name -> diagnosis.PortscanTarget
	46, // 18: diagnosis.PutPortscanTargetRequest.portscan_target:type_name -> diagnosis.PortscanTargetForUpsert
	45, // 19: diagnosis.PutPortscanTargetResponse.portscan_target:type_name -> diagnosis.PortscanTarget
	0,  // 20: diagnosis.DiagnosisService.ListDiagnosisDataSource:input_type -> diagnosis.ListDiagnosisDataSourceRequest
	2,  // 21: diagnosis.DiagnosisService.GetDiagnosisDataSource:input_type -> diagnosis.GetDiagnosisDataSourceRequest
	4,  // 22: diagnosis.DiagnosisService.PutDiagnosisDataSource:input_type -> diagnosis.PutDiagnosisDataSourceRequest
	6,  // 23: diagnosis.DiagnosisService.DeleteDiagnosisDataSource:input_type -> diagnosis.DeleteDiagnosisDataSourceRequest
	7,  // 24: diagnosis.DiagnosisService.ListJiraSetting:input_type -> diagnosis.ListJiraSettingRequest
	9,  // 25: diagnosis.DiagnosisService.GetJiraSetting:input_type -> diagnosis.GetJiraSettingRequest
	11, // 26: diagnosis.DiagnosisService.PutJiraSetting:input_type -> diagnosis.PutJiraSettingRequest
	13, // 27: diagnosis.DiagnosisService.DeleteJiraSetting:input_type -> diagnosis.DeleteJiraSettingRequest
	14, // 28: diagnosis.DiagnosisService.ListWpscanSetting:input_type -> diagnosis.ListWpscanSettingRequest
	16, // 29: diagnosis.DiagnosisService.GetWpscanSetting:input_type -> diagnosis.GetWpscanSettingRequest
	18, // 30: diagnosis.DiagnosisService.PutWpscanSetting:input_type -> diagnosis.PutWpscanSettingRequest
	20, // 31: diagnosis.DiagnosisService.DeleteWpscanSetting:input_type -> diagnosis.DeleteWpscanSettingRequest
	21, // 32: diagnosis.DiagnosisService.ListPortscanSetting:input_type -> diagnosis.ListPortscanSettingRequest
	23, // 33: diagnosis.DiagnosisService.GetPortscanSetting:input_type -> diagnosis.GetPortscanSettingRequest
	25, // 34: diagnosis.DiagnosisService.PutPortscanSetting:input_type -> diagnosis.PutPortscanSettingRequest
	27, // 35: diagnosis.DiagnosisService.DeletePortscanSetting:input_type -> diagnosis.DeletePortscanSettingRequest
	28, // 36: diagnosis.DiagnosisService.ListPortscanTarget:input_type -> diagnosis.ListPortscanTargetRequest
	30, // 37: diagnosis.DiagnosisService.GetPortscanTarget:input_type -> diagnosis.GetPortscanTargetRequest
	32, // 38: diagnosis.DiagnosisService.PutPortscanTarget:input_type -> diagnosis.PutPortscanTargetRequest
	34, // 39: diagnosis.DiagnosisService.DeletePortscanTarget:input_type -> diagnosis.DeletePortscanTargetRequest
	35, // 40: diagnosis.DiagnosisService.InvokeScan:input_type -> diagnosis.InvokeScanRequest
	47, // 41: diagnosis.DiagnosisService.InvokeScanAll:input_type -> google.protobuf.Empty
	1,  // 42: diagnosis.DiagnosisService.ListDiagnosisDataSource:output_type -> diagnosis.ListDiagnosisDataSourceResponse
	3,  // 43: diagnosis.DiagnosisService.GetDiagnosisDataSource:output_type -> diagnosis.GetDiagnosisDataSourceResponse
	5,  // 44: diagnosis.DiagnosisService.PutDiagnosisDataSource:output_type -> diagnosis.PutDiagnosisDataSourceResponse
	47, // 45: diagnosis.DiagnosisService.DeleteDiagnosisDataSource:output_type -> google.protobuf.Empty
	8,  // 46: diagnosis.DiagnosisService.ListJiraSetting:output_type -> diagnosis.ListJiraSettingResponse
	10, // 47: diagnosis.DiagnosisService.GetJiraSetting:output_type -> diagnosis.GetJiraSettingResponse
	12, // 48: diagnosis.DiagnosisService.PutJiraSetting:output_type -> diagnosis.PutJiraSettingResponse
	47, // 49: diagnosis.DiagnosisService.DeleteJiraSetting:output_type -> google.protobuf.Empty
	15, // 50: diagnosis.DiagnosisService.ListWpscanSetting:output_type -> diagnosis.ListWpscanSettingResponse
	17, // 51: diagnosis.DiagnosisService.GetWpscanSetting:output_type -> diagnosis.GetWpscanSettingResponse
	19, // 52: diagnosis.DiagnosisService.PutWpscanSetting:output_type -> diagnosis.PutWpscanSettingResponse
	47, // 53: diagnosis.DiagnosisService.DeleteWpscanSetting:output_type -> google.protobuf.Empty
	22, // 54: diagnosis.DiagnosisService.ListPortscanSetting:output_type -> diagnosis.ListPortscanSettingResponse
	24, // 55: diagnosis.DiagnosisService.GetPortscanSetting:output_type -> diagnosis.GetPortscanSettingResponse
	26, // 56: diagnosis.DiagnosisService.PutPortscanSetting:output_type -> diagnosis.PutPortscanSettingResponse
	47, // 57: diagnosis.DiagnosisService.DeletePortscanSetting:output_type -> google.protobuf.Empty
	29, // 58: diagnosis.DiagnosisService.ListPortscanTarget:output_type -> diagnosis.ListPortscanTargetResponse
	31, // 59: diagnosis.DiagnosisService.GetPortscanTarget:output_type -> diagnosis.GetPortscanTargetResponse
	33, // 60: diagnosis.DiagnosisService.PutPortscanTarget:output_type -> diagnosis.PutPortscanTargetResponse
	47, // 61: diagnosis.DiagnosisService.DeletePortscanTarget:output_type -> google.protobuf.Empty
	36, // 62: diagnosis.DiagnosisService.InvokeScan:output_type -> diagnosis.InvokeScanResponse
	47, // 63: diagnosis.DiagnosisService.InvokeScanAll:output_type -> google.protobuf.Empty
	42, // [42:64] is the sub-list for method output_type
	20, // [20:42] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_diagnosis_services_proto_init() }
func file_diagnosis_services_proto_init() {
	if File_diagnosis_services_proto != nil {
		return
	}
	file_diagnosis_entities_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_diagnosis_services_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiagnosisDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDiagnosisDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutDiagnosisDataSourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDiagnosisDataSourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJiraSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJiraSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJiraSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJiraSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutJiraSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutJiraSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJiraSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWpscanSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWpscanSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWpscanSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWpscanSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutWpscanSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutWpscanSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWpscanSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPortscanSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPortscanSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortscanSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortscanSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutPortscanSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutPortscanSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePortscanSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPortscanTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPortscanTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortscanTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortscanTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutPortscanTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutPortscanTargetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePortscanTargetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_diagnosis_services_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_diagnosis_services_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_diagnosis_services_proto_goTypes,
		DependencyIndexes: file_diagnosis_services_proto_depIdxs,
		MessageInfos:      file_diagnosis_services_proto_msgTypes,
	}.Build()
	File_diagnosis_services_proto = out.File
	file_diagnosis_services_proto_rawDesc = nil
	file_diagnosis_services_proto_goTypes = nil
	file_diagnosis_services_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiagnosisServiceClient is the client API for DiagnosisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiagnosisServiceClient interface {
	// DataSource
	ListDiagnosisDataSource(ctx context.Context, in *ListDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*ListDiagnosisDataSourceResponse, error)
	GetDiagnosisDataSource(ctx context.Context, in *GetDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*GetDiagnosisDataSourceResponse, error)
	PutDiagnosisDataSource(ctx context.Context, in *PutDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*PutDiagnosisDataSourceResponse, error)
	DeleteDiagnosisDataSource(ctx context.Context, in *DeleteDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// JiraSetting
	ListJiraSetting(ctx context.Context, in *ListJiraSettingRequest, opts ...grpc.CallOption) (*ListJiraSettingResponse, error)
	GetJiraSetting(ctx context.Context, in *GetJiraSettingRequest, opts ...grpc.CallOption) (*GetJiraSettingResponse, error)
	PutJiraSetting(ctx context.Context, in *PutJiraSettingRequest, opts ...grpc.CallOption) (*PutJiraSettingResponse, error)
	DeleteJiraSetting(ctx context.Context, in *DeleteJiraSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WpscanSetting
	ListWpscanSetting(ctx context.Context, in *ListWpscanSettingRequest, opts ...grpc.CallOption) (*ListWpscanSettingResponse, error)
	GetWpscanSetting(ctx context.Context, in *GetWpscanSettingRequest, opts ...grpc.CallOption) (*GetWpscanSettingResponse, error)
	PutWpscanSetting(ctx context.Context, in *PutWpscanSettingRequest, opts ...grpc.CallOption) (*PutWpscanSettingResponse, error)
	DeleteWpscanSetting(ctx context.Context, in *DeleteWpscanSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PortscanSetting
	ListPortscanSetting(ctx context.Context, in *ListPortscanSettingRequest, opts ...grpc.CallOption) (*ListPortscanSettingResponse, error)
	GetPortscanSetting(ctx context.Context, in *GetPortscanSettingRequest, opts ...grpc.CallOption) (*GetPortscanSettingResponse, error)
	PutPortscanSetting(ctx context.Context, in *PutPortscanSettingRequest, opts ...grpc.CallOption) (*PutPortscanSettingResponse, error)
	DeletePortscanSetting(ctx context.Context, in *DeletePortscanSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// PortscanTarget
	ListPortscanTarget(ctx context.Context, in *ListPortscanTargetRequest, opts ...grpc.CallOption) (*ListPortscanTargetResponse, error)
	GetPortscanTarget(ctx context.Context, in *GetPortscanTargetRequest, opts ...grpc.CallOption) (*GetPortscanTargetResponse, error)
	PutPortscanTarget(ctx context.Context, in *PutPortscanTargetRequest, opts ...grpc.CallOption) (*PutPortscanTargetResponse, error)
	DeletePortscanTarget(ctx context.Context, in *DeletePortscanTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// KICK
	InvokeScan(ctx context.Context, in *InvokeScanRequest, opts ...grpc.CallOption) (*InvokeScanResponse, error)
	InvokeScanAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type diagnosisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiagnosisServiceClient(cc grpc.ClientConnInterface) DiagnosisServiceClient {
	return &diagnosisServiceClient{cc}
}

func (c *diagnosisServiceClient) ListDiagnosisDataSource(ctx context.Context, in *ListDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*ListDiagnosisDataSourceResponse, error) {
	out := new(ListDiagnosisDataSourceResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/ListDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) GetDiagnosisDataSource(ctx context.Context, in *GetDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*GetDiagnosisDataSourceResponse, error) {
	out := new(GetDiagnosisDataSourceResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/GetDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) PutDiagnosisDataSource(ctx context.Context, in *PutDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*PutDiagnosisDataSourceResponse, error) {
	out := new(PutDiagnosisDataSourceResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/PutDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) DeleteDiagnosisDataSource(ctx context.Context, in *DeleteDiagnosisDataSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/DeleteDiagnosisDataSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) ListJiraSetting(ctx context.Context, in *ListJiraSettingRequest, opts ...grpc.CallOption) (*ListJiraSettingResponse, error) {
	out := new(ListJiraSettingResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/ListJiraSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) GetJiraSetting(ctx context.Context, in *GetJiraSettingRequest, opts ...grpc.CallOption) (*GetJiraSettingResponse, error) {
	out := new(GetJiraSettingResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/GetJiraSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) PutJiraSetting(ctx context.Context, in *PutJiraSettingRequest, opts ...grpc.CallOption) (*PutJiraSettingResponse, error) {
	out := new(PutJiraSettingResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/PutJiraSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) DeleteJiraSetting(ctx context.Context, in *DeleteJiraSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/DeleteJiraSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) ListWpscanSetting(ctx context.Context, in *ListWpscanSettingRequest, opts ...grpc.CallOption) (*ListWpscanSettingResponse, error) {
	out := new(ListWpscanSettingResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/ListWpscanSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) GetWpscanSetting(ctx context.Context, in *GetWpscanSettingRequest, opts ...grpc.CallOption) (*GetWpscanSettingResponse, error) {
	out := new(GetWpscanSettingResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/GetWpscanSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) PutWpscanSetting(ctx context.Context, in *PutWpscanSettingRequest, opts ...grpc.CallOption) (*PutWpscanSettingResponse, error) {
	out := new(PutWpscanSettingResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/PutWpscanSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) DeleteWpscanSetting(ctx context.Context, in *DeleteWpscanSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/DeleteWpscanSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) ListPortscanSetting(ctx context.Context, in *ListPortscanSettingRequest, opts ...grpc.CallOption) (*ListPortscanSettingResponse, error) {
	out := new(ListPortscanSettingResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/ListPortscanSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) GetPortscanSetting(ctx context.Context, in *GetPortscanSettingRequest, opts ...grpc.CallOption) (*GetPortscanSettingResponse, error) {
	out := new(GetPortscanSettingResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/GetPortscanSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) PutPortscanSetting(ctx context.Context, in *PutPortscanSettingRequest, opts ...grpc.CallOption) (*PutPortscanSettingResponse, error) {
	out := new(PutPortscanSettingResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/PutPortscanSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) DeletePortscanSetting(ctx context.Context, in *DeletePortscanSettingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/DeletePortscanSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) ListPortscanTarget(ctx context.Context, in *ListPortscanTargetRequest, opts ...grpc.CallOption) (*ListPortscanTargetResponse, error) {
	out := new(ListPortscanTargetResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/ListPortscanTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) GetPortscanTarget(ctx context.Context, in *GetPortscanTargetRequest, opts ...grpc.CallOption) (*GetPortscanTargetResponse, error) {
	out := new(GetPortscanTargetResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/GetPortscanTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) PutPortscanTarget(ctx context.Context, in *PutPortscanTargetRequest, opts ...grpc.CallOption) (*PutPortscanTargetResponse, error) {
	out := new(PutPortscanTargetResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/PutPortscanTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) DeletePortscanTarget(ctx context.Context, in *DeletePortscanTargetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/DeletePortscanTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) InvokeScan(ctx context.Context, in *InvokeScanRequest, opts ...grpc.CallOption) (*InvokeScanResponse, error) {
	out := new(InvokeScanResponse)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/InvokeScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diagnosisServiceClient) InvokeScanAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/diagnosis.DiagnosisService/InvokeScanAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiagnosisServiceServer is the server API for DiagnosisService service.
type DiagnosisServiceServer interface {
	// DataSource
	ListDiagnosisDataSource(context.Context, *ListDiagnosisDataSourceRequest) (*ListDiagnosisDataSourceResponse, error)
	GetDiagnosisDataSource(context.Context, *GetDiagnosisDataSourceRequest) (*GetDiagnosisDataSourceResponse, error)
	PutDiagnosisDataSource(context.Context, *PutDiagnosisDataSourceRequest) (*PutDiagnosisDataSourceResponse, error)
	DeleteDiagnosisDataSource(context.Context, *DeleteDiagnosisDataSourceRequest) (*emptypb.Empty, error)
	// JiraSetting
	ListJiraSetting(context.Context, *ListJiraSettingRequest) (*ListJiraSettingResponse, error)
	GetJiraSetting(context.Context, *GetJiraSettingRequest) (*GetJiraSettingResponse, error)
	PutJiraSetting(context.Context, *PutJiraSettingRequest) (*PutJiraSettingResponse, error)
	DeleteJiraSetting(context.Context, *DeleteJiraSettingRequest) (*emptypb.Empty, error)
	// WpscanSetting
	ListWpscanSetting(context.Context, *ListWpscanSettingRequest) (*ListWpscanSettingResponse, error)
	GetWpscanSetting(context.Context, *GetWpscanSettingRequest) (*GetWpscanSettingResponse, error)
	PutWpscanSetting(context.Context, *PutWpscanSettingRequest) (*PutWpscanSettingResponse, error)
	DeleteWpscanSetting(context.Context, *DeleteWpscanSettingRequest) (*emptypb.Empty, error)
	// PortscanSetting
	ListPortscanSetting(context.Context, *ListPortscanSettingRequest) (*ListPortscanSettingResponse, error)
	GetPortscanSetting(context.Context, *GetPortscanSettingRequest) (*GetPortscanSettingResponse, error)
	PutPortscanSetting(context.Context, *PutPortscanSettingRequest) (*PutPortscanSettingResponse, error)
	DeletePortscanSetting(context.Context, *DeletePortscanSettingRequest) (*emptypb.Empty, error)
	// PortscanTarget
	ListPortscanTarget(context.Context, *ListPortscanTargetRequest) (*ListPortscanTargetResponse, error)
	GetPortscanTarget(context.Context, *GetPortscanTargetRequest) (*GetPortscanTargetResponse, error)
	PutPortscanTarget(context.Context, *PutPortscanTargetRequest) (*PutPortscanTargetResponse, error)
	DeletePortscanTarget(context.Context, *DeletePortscanTargetRequest) (*emptypb.Empty, error)
	// KICK
	InvokeScan(context.Context, *InvokeScanRequest) (*InvokeScanResponse, error)
	InvokeScanAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
}

// UnimplementedDiagnosisServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDiagnosisServiceServer struct {
}

func (*UnimplementedDiagnosisServiceServer) ListDiagnosisDataSource(context.Context, *ListDiagnosisDataSourceRequest) (*ListDiagnosisDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) GetDiagnosisDataSource(context.Context, *GetDiagnosisDataSourceRequest) (*GetDiagnosisDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) PutDiagnosisDataSource(context.Context, *PutDiagnosisDataSourceRequest) (*PutDiagnosisDataSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) DeleteDiagnosisDataSource(context.Context, *DeleteDiagnosisDataSourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiagnosisDataSource not implemented")
}
func (*UnimplementedDiagnosisServiceServer) ListJiraSetting(context.Context, *ListJiraSettingRequest) (*ListJiraSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJiraSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) GetJiraSetting(context.Context, *GetJiraSettingRequest) (*GetJiraSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJiraSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) PutJiraSetting(context.Context, *PutJiraSettingRequest) (*PutJiraSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutJiraSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) DeleteJiraSetting(context.Context, *DeleteJiraSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJiraSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) ListWpscanSetting(context.Context, *ListWpscanSettingRequest) (*ListWpscanSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWpscanSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) GetWpscanSetting(context.Context, *GetWpscanSettingRequest) (*GetWpscanSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWpscanSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) PutWpscanSetting(context.Context, *PutWpscanSettingRequest) (*PutWpscanSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutWpscanSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) DeleteWpscanSetting(context.Context, *DeleteWpscanSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWpscanSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) ListPortscanSetting(context.Context, *ListPortscanSettingRequest) (*ListPortscanSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortscanSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) GetPortscanSetting(context.Context, *GetPortscanSettingRequest) (*GetPortscanSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortscanSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) PutPortscanSetting(context.Context, *PutPortscanSettingRequest) (*PutPortscanSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPortscanSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) DeletePortscanSetting(context.Context, *DeletePortscanSettingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortscanSetting not implemented")
}
func (*UnimplementedDiagnosisServiceServer) ListPortscanTarget(context.Context, *ListPortscanTargetRequest) (*ListPortscanTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortscanTarget not implemented")
}
func (*UnimplementedDiagnosisServiceServer) GetPortscanTarget(context.Context, *GetPortscanTargetRequest) (*GetPortscanTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortscanTarget not implemented")
}
func (*UnimplementedDiagnosisServiceServer) PutPortscanTarget(context.Context, *PutPortscanTargetRequest) (*PutPortscanTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutPortscanTarget not implemented")
}
func (*UnimplementedDiagnosisServiceServer) DeletePortscanTarget(context.Context, *DeletePortscanTargetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePortscanTarget not implemented")
}
func (*UnimplementedDiagnosisServiceServer) InvokeScan(context.Context, *InvokeScanRequest) (*InvokeScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeScan not implemented")
}
func (*UnimplementedDiagnosisServiceServer) InvokeScanAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvokeScanAll not implemented")
}

func RegisterDiagnosisServiceServer(s *grpc.Server, srv DiagnosisServiceServer) {
	s.RegisterService(&_DiagnosisService_serviceDesc, srv)
}

func _DiagnosisService_ListDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).ListDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/ListDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).ListDiagnosisDataSource(ctx, req.(*ListDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_GetDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).GetDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/GetDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).GetDiagnosisDataSource(ctx, req.(*GetDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_PutDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).PutDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/PutDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).PutDiagnosisDataSource(ctx, req.(*PutDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_DeleteDiagnosisDataSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiagnosisDataSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).DeleteDiagnosisDataSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/DeleteDiagnosisDataSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).DeleteDiagnosisDataSource(ctx, req.(*DeleteDiagnosisDataSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_ListJiraSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJiraSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).ListJiraSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/ListJiraSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).ListJiraSetting(ctx, req.(*ListJiraSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_GetJiraSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJiraSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).GetJiraSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/GetJiraSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).GetJiraSetting(ctx, req.(*GetJiraSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_PutJiraSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutJiraSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).PutJiraSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/PutJiraSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).PutJiraSetting(ctx, req.(*PutJiraSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_DeleteJiraSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJiraSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).DeleteJiraSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/DeleteJiraSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).DeleteJiraSetting(ctx, req.(*DeleteJiraSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_ListWpscanSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWpscanSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).ListWpscanSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/ListWpscanSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).ListWpscanSetting(ctx, req.(*ListWpscanSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_GetWpscanSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWpscanSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).GetWpscanSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/GetWpscanSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).GetWpscanSetting(ctx, req.(*GetWpscanSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_PutWpscanSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutWpscanSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).PutWpscanSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/PutWpscanSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).PutWpscanSetting(ctx, req.(*PutWpscanSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_DeleteWpscanSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWpscanSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).DeleteWpscanSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/DeleteWpscanSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).DeleteWpscanSetting(ctx, req.(*DeleteWpscanSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_ListPortscanSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortscanSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).ListPortscanSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/ListPortscanSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).ListPortscanSetting(ctx, req.(*ListPortscanSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_GetPortscanSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortscanSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).GetPortscanSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/GetPortscanSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).GetPortscanSetting(ctx, req.(*GetPortscanSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_PutPortscanSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPortscanSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).PutPortscanSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/PutPortscanSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).PutPortscanSetting(ctx, req.(*PutPortscanSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_DeletePortscanSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortscanSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).DeletePortscanSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/DeletePortscanSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).DeletePortscanSetting(ctx, req.(*DeletePortscanSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_ListPortscanTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPortscanTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).ListPortscanTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/ListPortscanTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).ListPortscanTarget(ctx, req.(*ListPortscanTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_GetPortscanTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortscanTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).GetPortscanTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/GetPortscanTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).GetPortscanTarget(ctx, req.(*GetPortscanTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_PutPortscanTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutPortscanTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).PutPortscanTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/PutPortscanTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).PutPortscanTarget(ctx, req.(*PutPortscanTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_DeletePortscanTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortscanTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).DeletePortscanTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/DeletePortscanTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).DeletePortscanTarget(ctx, req.(*DeletePortscanTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_InvokeScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).InvokeScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/InvokeScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).InvokeScan(ctx, req.(*InvokeScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiagnosisService_InvokeScanAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiagnosisServiceServer).InvokeScanAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diagnosis.DiagnosisService/InvokeScanAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiagnosisServiceServer).InvokeScanAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiagnosisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "diagnosis.DiagnosisService",
	HandlerType: (*DiagnosisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDiagnosisDataSource",
			Handler:    _DiagnosisService_ListDiagnosisDataSource_Handler,
		},
		{
			MethodName: "GetDiagnosisDataSource",
			Handler:    _DiagnosisService_GetDiagnosisDataSource_Handler,
		},
		{
			MethodName: "PutDiagnosisDataSource",
			Handler:    _DiagnosisService_PutDiagnosisDataSource_Handler,
		},
		{
			MethodName: "DeleteDiagnosisDataSource",
			Handler:    _DiagnosisService_DeleteDiagnosisDataSource_Handler,
		},
		{
			MethodName: "ListJiraSetting",
			Handler:    _DiagnosisService_ListJiraSetting_Handler,
		},
		{
			MethodName: "GetJiraSetting",
			Handler:    _DiagnosisService_GetJiraSetting_Handler,
		},
		{
			MethodName: "PutJiraSetting",
			Handler:    _DiagnosisService_PutJiraSetting_Handler,
		},
		{
			MethodName: "DeleteJiraSetting",
			Handler:    _DiagnosisService_DeleteJiraSetting_Handler,
		},
		{
			MethodName: "ListWpscanSetting",
			Handler:    _DiagnosisService_ListWpscanSetting_Handler,
		},
		{
			MethodName: "GetWpscanSetting",
			Handler:    _DiagnosisService_GetWpscanSetting_Handler,
		},
		{
			MethodName: "PutWpscanSetting",
			Handler:    _DiagnosisService_PutWpscanSetting_Handler,
		},
		{
			MethodName: "DeleteWpscanSetting",
			Handler:    _DiagnosisService_DeleteWpscanSetting_Handler,
		},
		{
			MethodName: "ListPortscanSetting",
			Handler:    _DiagnosisService_ListPortscanSetting_Handler,
		},
		{
			MethodName: "GetPortscanSetting",
			Handler:    _DiagnosisService_GetPortscanSetting_Handler,
		},
		{
			MethodName: "PutPortscanSetting",
			Handler:    _DiagnosisService_PutPortscanSetting_Handler,
		},
		{
			MethodName: "DeletePortscanSetting",
			Handler:    _DiagnosisService_DeletePortscanSetting_Handler,
		},
		{
			MethodName: "ListPortscanTarget",
			Handler:    _DiagnosisService_ListPortscanTarget_Handler,
		},
		{
			MethodName: "GetPortscanTarget",
			Handler:    _DiagnosisService_GetPortscanTarget_Handler,
		},
		{
			MethodName: "PutPortscanTarget",
			Handler:    _DiagnosisService_PutPortscanTarget_Handler,
		},
		{
			MethodName: "DeletePortscanTarget",
			Handler:    _DiagnosisService_DeletePortscanTarget_Handler,
		},
		{
			MethodName: "InvokeScan",
			Handler:    _DiagnosisService_InvokeScan_Handler,
		},
		{
			MethodName: "InvokeScanAll",
			Handler:    _DiagnosisService_InvokeScanAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diagnosis/services.proto",
}
